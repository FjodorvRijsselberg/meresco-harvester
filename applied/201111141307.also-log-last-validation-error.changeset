Changeset created on Mon Nov 14 13:07:44 UTC 2011 by Seecr (Seek You Too B.V.)

Description: Keeps last validation error message.

    Previously the error message for the validation error to cause TooMuchInvalidDataException was not logged. Instead of only logging 'ignored' records (id + message) all 'invalid' records will now be logged.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-harvester/workingsets/7.2.4-Natag/version_0

diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/doc/migrate_ignored2invalid.txt version_1/doc/migrate_ignored2invalid.txt
--- version_0/doc/migrate_ignored2invalid.txt	1970-01-01 01:00:00.000000000 +0100
+++ version_1/doc/migrate_ignored2invalid.txt	2011-11-14 14:07:37.000000000 +0100
@@ -0,0 +1,22 @@
+Migration from Meresco Harvester 7.2.x to Meresco Harvester 7.3
+'ignored' was a misnomer, renamed to 'invalid' because we also
+want to log the last InvalidDataException message that was not ignored.
+
+
+Sketch of possible migration script:
+
+
+from os import rename
+from os.path import isdir, isfile, join
+
+ignoredPath = join(logDir, "ignored")
+if isdir(ignoredPath):
+    rename(ignoredPath, join(logDir, 'invalid'))
+for domainName in domainNames:
+    ignoredIdsFilePath = join(stateDir, domainName + "_ignored.ids")
+    if isfile(ignoredIdsFilePath):
+        rename(
+            ignoredIdsFilePath,
+            join(stateDir, domainName + "_invalid.ids")
+        )
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/harvester/action.py version_1/meresco/harvester/action.py
--- version_0/meresco/harvester/action.py	2011-11-11 11:10:13.000000000 +0100
+++ version_1/meresco/harvester/action.py	2011-11-14 14:07:37.000000000 +0100
@@ -51,6 +51,7 @@
         self._stateDir = stateDir
         self._logDir = logDir
         self._generalHarvestLog = generalHarvestLog
+        self.invalidIdsFilename = join(self._stateDir, self._repository.id + '_invalid.ids')
 
     @staticmethod
     def create(repository, stateDir, logDir, generalHarvestLog):
@@ -141,11 +142,10 @@
             return False, 'Not deleting outside timeslots.', False
 
         self.filename = join(self._stateDir, self._repository.id + '.ids')
-        self.ignoreFilename = join(self._stateDir, self._repository.id + '_ignored.ids')
 
         d = self._createDeleteIds()
         d.deleteFile(self.filename)
-        d.deleteFile(self.ignoreFilename)
+        d.deleteFile(self.invalidIdsFilename)
         d.markDeleted()
         return True, 'Deleted', False
 
@@ -153,7 +153,6 @@
     def __init__(self, repository, stateDir, logDir, generalHarvestLog):
         Action.__init__(self, repository, stateDir, logDir, generalHarvestLog)
         self.filename = join(self._stateDir, self._repository.id + '.ids')
-        self.ignoreFilename = join(self._stateDir, self._repository.id + '_ignored.ids')
         self.oldfilename = self.filename + ".old"
 
     def do(self):
@@ -178,7 +177,7 @@
 
     def _smoothinit(self):
         if isfile(self.filename):
-            writeIds(self.oldfilename, set(readIds(self.filename) + readIds(self.ignoreFilename)))
+            writeIds(self.oldfilename, set(readIds(self.filename) + readIds(self.invalidIdsFilename)))
             writeIds(self.filename, set())
         else:
             open(self.oldfilename, 'w').close()
Only in version_0/meresco/harvester/controlpanel/html/dynamic: ignoredRecord.sf
Only in version_0/meresco/harvester/controlpanel/html/dynamic: ignored.sf
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/harvester/controlpanel/html/dynamic/invalidRecord.sf version_1/meresco/harvester/controlpanel/html/dynamic/invalidRecord.sf
--- version_0/meresco/harvester/controlpanel/html/dynamic/invalidRecord.sf	1970-01-01 01:00:00.000000000 +0100
+++ version_1/meresco/harvester/controlpanel/html/dynamic/invalidRecord.sf	2011-11-14 14:07:37.000000000 +0100
@@ -0,0 +1,47 @@
+## begin license ##
+# 
+# "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+# a web-control panel.
+# "Meresco Harvester" is originally called "Sahara" and was developed for 
+# SURFnet by:
+# Seek You Too B.V. (CQ2) http://www.cq2.nl 
+# 
+# Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# 
+# 
+# This file is part of "Meresco Harvester"
+# 
+# "Meresco Harvester" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Harvester" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Harvester"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
+## end license ##
+
+def main(arguments, **kwargs):
+    domainId = arguments.get('domainId', [None])[0]
+    repositoryId = arguments.get('repositoryId', [None])[0]
+    recordId = arguments.get('recordId', [None])[0]
+
+    yield """<div>
+    <h3>Repository %s - Record %s</h3>""" % (repositoryId, recordId)
+
+    invalidRecord = any.getInvalidRecord(domainId, repositoryId, recordId)
+
+    yield "<pre>%s</pre>" % escapeHtml(xpath(invalidRecord, '//diag:diagnostic/diag:details/text()')[0])
+    yield '<p><a href="/page/invalid/?%s">Back to invalid records</a></p>' % escapeHtml(urlencode(dict(domainId=domainId, repositoryId=repositoryId)))
+    yield "</div>"""
+
+
+def xpath(node, path):
+    return node.xpath(path, namespaces={'diag':'http://www.loc.gov/zing/srw/diagnostic/'})
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/harvester/controlpanel/html/dynamic/invalid.sf version_1/meresco/harvester/controlpanel/html/dynamic/invalid.sf
--- version_0/meresco/harvester/controlpanel/html/dynamic/invalid.sf	1970-01-01 01:00:00.000000000 +0100
+++ version_1/meresco/harvester/controlpanel/html/dynamic/invalid.sf	2011-11-14 14:07:37.000000000 +0100
@@ -0,0 +1,49 @@
+## begin license ##
+# 
+# "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+# a web-control panel.
+# "Meresco Harvester" is originally called "Sahara" and was developed for 
+# SURFnet by:
+# Seek You Too B.V. (CQ2) http://www.cq2.nl 
+# 
+# Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# 
+# 
+# This file is part of "Meresco Harvester"
+# 
+# "Meresco Harvester" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Harvester" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Harvester"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
+## end license ##
+
+def main(arguments, **kwargs):
+    domainId = arguments.get('domainId', [None])[0]
+    repositoryId = arguments.get('repositoryId', [None])[0]
+
+    orginalArgs = dict(domainId=domainId, repositoryId=repositoryId)
+
+    yield """<div>
+    <h3>Repository %s</h3>""" % repositoryId
+
+    yield '<table class="event">'
+    yield '<tr><td class="eventheader">Invalid records</td></tr>'
+    for id in any.invalidRecords(domainId, repositoryId):
+        recordId = id.split(":", 1)[-1]
+        args = {'recordId': recordId}
+        args.update(orginalArgs)
+        yield '<tr><td class="link"><a href="/page/invalidRecord/?%s">%s</a></td></tr>' % (escapeHtml(urlencode(args)), recordId)
+    yield """</table>
+    <p><a href="/page/showHarvesterStatus/show?%s">Back to harvester status of this repository</a></p>
+    </div>""" % (escapeHtml(urlencode(orginalArgs)))
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/harvester/controlpanel/html/dynamic/rss.sf version_1/meresco/harvester/controlpanel/html/dynamic/rss.sf
--- version_0/meresco/harvester/controlpanel/html/dynamic/rss.sf	2011-11-11 11:10:13.000000000 +0100
+++ version_1/meresco/harvester/controlpanel/html/dynamic/rss.sf	2011-11-14 14:07:37.000000000 +0100
@@ -52,7 +52,7 @@
         'harvested': ''.join(statusLxml.xpath("/GetStatus/status/harvested/text()")),
         'uploaded': ''.join(statusLxml.xpath("/GetStatus/status/uploaded/text()")),
         'deleted': ''.join(statusLxml.xpath("/GetStatus/status/deleted/text()")),
-        'ignored': ''.join(statusLxml.xpath("/GetStatus/status/ignored/text()")),
+        'invalid': ''.join(statusLxml.xpath("/GetStatus/status/invalid/text()")),
         'totalerrors': ''.join(statusLxml.xpath("/GetStatus/status/totalerrors/text()")),
     }
     lastHarvestAttempt = statusLxml.xpath("/GetStatus/status/lastHarvestAttempt/text()")
@@ -64,7 +64,7 @@
     Harvested records: %(harvested)s&lt;br/&gt;
     Uploaded records: %(uploaded)s&lt;br/&gt;
     Deleted records: %(deleted)s&lt;br/&gt;
-    Validation errors: %(ignored)s&lt;br/&gt;
+    Validation errors: %(invalid)s&lt;br/&gt;
     Errors: %(totalerrors)s""" % state,
             "link": linkToStatusPage,
             "guid": lastHarvestAttempt[0],
Only in version_0/meresco/harvester/controlpanel/slowfoottemplates: ignored
Only in version_0/meresco/harvester/controlpanel/slowfoottemplates: ignoredRecord
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/harvester/controlpanel/slowfoottemplates/invalid version_1/meresco/harvester/controlpanel/slowfoottemplates/invalid
--- version_0/meresco/harvester/controlpanel/slowfoottemplates/invalid	1970-01-01 01:00:00.000000000 +0100
+++ version_1/meresco/harvester/controlpanel/slowfoottemplates/invalid	2011-11-14 14:07:37.000000000 +0100
@@ -0,0 +1,3 @@
+<%
+include(req.get_options()['internalServer'] + '/invalid?' + urlencode(args))
+%>
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/harvester/controlpanel/slowfoottemplates/invalidRecord version_1/meresco/harvester/controlpanel/slowfoottemplates/invalidRecord
--- version_0/meresco/harvester/controlpanel/slowfoottemplates/invalidRecord	1970-01-01 01:00:00.000000000 +0100
+++ version_1/meresco/harvester/controlpanel/slowfoottemplates/invalidRecord	2011-11-14 14:07:37.000000000 +0100
@@ -0,0 +1,3 @@
+<%
+include(req.get_options()['internalServer'] + '/invalidRecord?' + urlencode(args))
+%>
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/harvester/controlpanel/slowfoottemplates/showHarvesterStatus version_1/meresco/harvester/controlpanel/slowfoottemplates/showHarvesterStatus
--- version_0/meresco/harvester/controlpanel/slowfoottemplates/showHarvesterStatus	2011-11-11 11:10:13.000000000 +0100
+++ version_1/meresco/harvester/controlpanel/slowfoottemplates/showHarvesterStatus	2011-11-14 14:07:37.000000000 +0100
@@ -11,9 +11,9 @@
 statuses = asxml(theUrl).saharaget.GetStatus.status
 
 statusUrl = url('%s/getStatus?%s' % (req.get_options()['internalServer'], args))
-ignored = {}
+invalid = {}
 for status in asxml(statusUrl).saharaget.GetStatus.status:
-    ignored[status.repositoryId] = status
+    invalid[status.repositoryId] = status
 #
 %>
 <table class="event">
@@ -42,11 +42,11 @@
 <td><% escape_html(status.harvested) %>/<% escape_html(status.uploaded) %>/<% escape_html(status.deleted) %></td>
 <td class="link">
 <% 
-  nrOfValidationErrors = int(ignored[status.repositoryId].ignored) if status.repositoryId in ignored else 0
+  nrOfValidationErrors = int(invalid[status.repositoryId].invalid) if status.repositoryId in invalid else 0
   args = urlencode(dict(domainId=domainId, repositoryId=status.repositoryId))
   if nrOfValidationErrors > 0:
 %>
-    <a href="/page/ignored/?<%= args %>"><%=nrOfValidationErrors%> error<%='s' if nrOfValidationErrors != 1 else ''%></a>
+    <a href="/page/invalid/?<%= args %>"><%=nrOfValidationErrors%> error<%='s' if nrOfValidationErrors != 1 else ''%></a>
 <%
   #
 %>
@@ -113,26 +113,26 @@
 <%
 for status in statuses:
   repositoryId = status.repositoryId
-  ignorednr = int(str(status.ignored))
-  if ignorednr:
+  invalidnr = int(str(status.invalid))
+  if invalidnr:
     #
 %>
 <tr class="eventinfo">
 <td><a name="<%= repositoryId %>" href="#top_<%= repositoryId %>"><%= repositoryId %></a></td>
 </tr>
 <tr>
-<td>Nr. of validation errors: <strong><%= ignorednr %></strong></td>
+<td>Nr. of validation errors: <strong><%= invalidnr %></strong></td>
 </tr>
 <%
-    if hasattr(status.recentignores, 'ignoredId'):
-      for ignoredId in status.recentignores.ignoredId:
-        recordId = ignoredId.split(":", 1)[-1]
+    if hasattr(status.recentinvalids, 'invalidId'):
+      for invalidId in status.recentinvalids.invalidId:
+        recordId = invalidId.split(":", 1)[-1]
         newArgs = {'recordId': recordId, 'repositoryId': repositoryId, 'domainId': domainId}
         #
 %>
         <tr>
           <td class="link">
-            <a href="/page/ignoredRecord/?<%= urlencode(newArgs)%>"><%= recordId%></a>
+            <a href="/page/invalidRecord/?<%= urlencode(newArgs)%>"><%= recordId%></a>
           </td>
         </tr>
 <%
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/harvester/harvesterlog.py version_1/meresco/harvester/harvesterlog.py
--- version_0/meresco/harvester/harvesterlog.py	2011-11-11 11:10:13.000000000 +0100
+++ version_1/meresco/harvester/harvesterlog.py	2011-11-14 14:07:37.000000000 +0100
@@ -9,6 +9,7 @@
 # Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
 # Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
 # Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
 # Copyright (C) 2009 Tilburg University http://www.uvt.nl
 # Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
@@ -38,30 +39,29 @@
 from eventlogger import EventLogger
 from ids import Ids
 import traceback
-from os.path import join, isdir, isfile, dirname
+from os.path import join, isdir, isfile, dirname, basename
 from os import makedirs, remove
 from shutil import rmtree
 from state import State
 from escaping import escapeFilename
 
 
+INVALID_DATA_MESSAGES_DIR = "invalid"
+
 def idfilename(stateDir, repositorykey):
     return join(stateDir, repositorykey+'.ids')
 
-def ignoreFilepath(logDir, uploadid):
-    repositoryId, recordId = uploadid.split(":", 1)
-    return join(logDir, "ignored", repositoryId, escapeFilename(recordId))
-
 def ensureDirectory(directoryPath):
     isdir(directoryPath) or makedirs(directoryPath)
 
 class HarvesterLog(object):
     def __init__(self, stateDir, logDir, name):
-        self._name=name
+        self._name = name
         self._logDir = logDir
+        ensureDirectory(logDir)
         ensureDirectory(stateDir)
         self._ids = Ids(stateDir, name)
-        self._ignoredIds = Ids(stateDir, name + "_ignored")
+        self._invalidIds = Ids(stateDir, name + "_invalid")
         self._state = State(stateDir, name)
         self._eventlogger = EventLogger(logDir + '/' + name +'.events')
         self.from_ = self._state.startdate
@@ -84,8 +84,8 @@
     def totalIds(self):
         return len(self._ids)
 
-    def totalIgnoredIds(self):
-        return len(self._ignoredIds)
+    def totalInvalidIds(self):
+        return len(self._invalidIds)
 
     def eventLogger(self):
         # Should be removed, but is still used in Harvester.
@@ -115,11 +115,11 @@
     def close(self):
         self._eventlogger.close()
         self._ids.close()
-        self._ignoredIds.close()
+        self._invalidIds.close()
         self._state.close()
 
     def notifyHarvestedRecord(self, uploadid):
-        self._removeFromIgnored(uploadid)
+        self._removeFromInvalidData(uploadid)
         self._harvestedCount += 1
 
     def uploadIdentifier(self, uploadid):
@@ -130,19 +130,20 @@
         self._ids.remove(uploadid)
         self._deletedCount += 1
 
-    def ignoreIdentifier(self, uploadid, message):
-        ignoreFile = ignoreFilepath(self._logDir, uploadid)
-        ensureDirectory(dirname(ignoreFile))
-        open(ignoreFile, 'w').write(message)
-        self._ignoredIds.add(uploadid)
-        self._eventlogger.logWarning('IGNORED', uploadid)
+    def logInvalidData(self, uploadid, message):
+        self._invalidIds.add(uploadid)
+        filePath = self._invalidDataMessageFilePath(uploadid)
+        ensureDirectory(dirname(filePath))
+        open(filePath, 'w').write(message)
 
-    def clearIgnored(self, repositoryId):
-        repositoryIgnoredIds = [id for id in self._ignoredIds 
-                                if id.startswith("%s:" % repositoryId)]
-        for id in repositoryIgnoredIds:
-            self._ignoredIds.remove(id)
-        rmtree(join(self._logDir, "ignored", repositoryId))
+    def logIgnoredIdentifierWarning(self, uploadid):
+        self._eventlogger.logWarning('IGNORED', uploadid)
+    
+    def clearInvalidData(self, repositoryId):
+        for id in list(self._invalidIds):
+            if id.startswith("%s:" % repositoryId):
+                self._invalidIds.remove(id)
+        rmtree(join(self._logDir, INVALID_DATA_MESSAGES_DIR, repositoryId))
 
     def hasWork(self):
         return not self.isCurrentDay(self.from_) or self.token
@@ -150,12 +151,17 @@
     def state(self):
         return self._state
 
-    def ignoredIds(self):
-        return [id for id in self._ignoredIds]
+    def invalidIds(self):
+        return list(self._invalidIds)
 
-    def _removeFromIgnored(self, uploadid):
-        self._ignoredIds.remove(uploadid)
-        ignoreFile = ignoreFilepath(self._logDir, uploadid)
-        if isfile(ignoreFile):
-            remove(ignoreFile)
+    def _removeFromInvalidData(self, uploadid):
+        self._invalidIds.remove(uploadid)
+        invalidDataMessageFilePath = self._invalidDataMessageFilePath(uploadid)
+        if isfile(invalidDataMessageFilePath):
+            remove(invalidDataMessageFilePath)
+
+    def _invalidDataMessageFilePath(self, uploadid):
+        repositoryId, recordId = uploadid.split(":", 1)
+        return join(self._logDir, INVALID_DATA_MESSAGES_DIR, repositoryId, escapeFilename(recordId))
 
+    
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/harvester/harvester.py version_1/meresco/harvester/harvester.py
--- version_0/meresco/harvester/harvester.py	2011-11-11 11:10:13.000000000 +0100
+++ version_1/meresco/harvester/harvester.py	2011-11-14 14:07:37.000000000 +0100
@@ -84,10 +84,11 @@
                 self.do.send(upload)
                 self.do.uploadIdentifier(upload.id)
             except InvalidDataException, e:
+                self.do.logInvalidData(upload.id, e.originalMessage)
                 maxIgnore = self._repository.maxIgnore()
-                if self.any.totalIgnoredIds() >= maxIgnore:
+                if self.any.totalInvalidIds() > maxIgnore:
                     raise TooMuchInvalidDataException(upload.id, maxIgnore)
-                self.do.ignoreIdentifier(upload.id, e.originalMessage)
+                self.do.logIgnoredIdentifierWarning(upload.id)
 
     def _harvestLoop(self):
         try:
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/harvester/ids.py version_1/meresco/harvester/ids.py
--- version_0/meresco/harvester/ids.py	2011-11-11 11:10:13.000000000 +0100
+++ version_1/meresco/harvester/ids.py	2011-11-14 14:07:37.000000000 +0100
@@ -38,11 +38,11 @@
     from sets import Set as set
 
 from os import makedirs
-from os.path import isdir
+from os.path import isdir, join
 
 def idfilename(stateDir, name):
     isdir(stateDir) or makedirs(stateDir)
-    return os.path.join(stateDir, name + '.ids')
+    return join(stateDir, name + '.ids')
 
 class Ids(object):
     def __init__(self, stateDir, name):
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/harvester/repositorystatus.py version_1/meresco/harvester/repositorystatus.py
--- version_0/meresco/harvester/repositorystatus.py	2011-11-11 11:10:13.000000000 +0100
+++ version_1/meresco/harvester/repositorystatus.py	2011-11-14 14:07:37.000000000 +0100
@@ -36,17 +36,18 @@
 from itertools import ifilter, islice
 from meresco.core import Observable
 
+from harvesterlog import INVALID_DATA_MESSAGES_DIR
+
+
 NUMBERS_RE = compile(r'.*Harvested/Uploaded/Deleted/Total:\s*(\d+)/(\d+)/(\d+)/(\d+).*')
 
 class RepositoryStatus(Observable):
-
     def __init__(self, logPath, statePath, name=None):
         Observable.__init__(self, name)
         self._logPath = logPath
         self._statePath = statePath
 
     def getStatus(self, domainId, repositoryGroupId=None, repositoryId=None):
-        ignoredDir = join(self._logPath, domainId, "ignored")
         yield "<GetStatus>"
         if repositoryId:
             groupId = self.any.getRepositoryGroupId(domainId=domainId, repositoryId=repositoryId)
@@ -59,14 +60,15 @@
                     yield self._getRepositoryStatus(domainId, groupId, repoId)
         yield "</GetStatus>"
 
-    def ignoredRecords(self, domainId, repositoryId):
-        ignoredFile = join(self._statePath, domainId, "%s_ignored.ids" % repositoryId)
-        if not isfile(ignoredFile):
+    def invalidRecords(self, domainId, repositoryId):
+        invalidFile = join(self._statePath, domainId, "%s_invalid.ids" % repositoryId)
+        if not isfile(invalidFile):
             return []
-        return reversed([line.strip() for line in open(ignoredFile) if line.strip()])
+        return reversed([line.strip() for line in open(invalidFile) if line.strip()])
 
-    def getIgnoredRecord(self, domainId, repositoryId, recordId):
-        return parse(open(join(self._logPath, domainId, "ignored", repositoryId, recordId)))
+    def getInvalidRecord(self, domainId, repositoryId, recordId):
+        invalidDir = join(self._logPath, domainId, INVALID_DATA_MESSAGES_DIR)
+        return parse(open(join(invalidDir, repositoryId, recordId)))
 
     def _getRepositoryStatus(self, domainId, groupId, repoId):
         stats = self._parseEventsFile(domainId, repoId)
@@ -81,17 +83,17 @@
         for error in stats['recenterrors']:
             yield '<error date="%s">%s</error>\n' % (error[0], escapeXml(error[1])) 
         yield '</recenterrors>\n'
-        yield '<ignored>%s</ignored>\n' % self._ignoredCount(domainId, repoId)
-        yield '<recentignores>\n'
-        for ignoredRecord in islice(self.ignoredRecords(domainId, repoId), 10):
-            yield '<ignoredId>%s</ignoredId>\n' % ignoredRecord
-        yield '</recentignores>\n'
+        yield '<invalid>%s</invalid>\n' % self._invalidCount(domainId, repoId)
+        yield '<recentinvalids>\n'
+        for invalidRecord in islice(self.invalidRecords(domainId, repoId), 10):
+            yield '<invalidId>%s</invalidId>\n' % invalidRecord
+        yield '</recentinvalids>\n'
         yield '<lastHarvestAttempt>%s</lastHarvestAttempt>\n' % stats.get('lastHarvestAttempt', '')
         yield '</status>\n'
 
-    def _ignoredCount(self, domainId, repositoryId):
-        ignoredFile = join(self._statePath, domainId, "%s_ignored.ids" % repositoryId)
-        return len(open(ignoredFile).readlines()) if isfile(ignoredFile) else 0
+    def _invalidCount(self, domainId, repositoryId):
+        invalidFile = join(self._statePath, domainId, "%s_invalid.ids" % repositoryId)
+        return len(open(invalidFile).readlines()) if isfile(invalidFile) else 0
 
     def _parseEventsFile(self, domainId, repositoryId):
         parseState = {'errors': []}
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/harvesterlogtest.py version_1/test/harvesterlogtest.py
--- version_0/test/harvesterlogtest.py	2011-11-11 11:10:13.000000000 +0100
+++ version_1/test/harvesterlogtest.py	2011-11-14 14:07:37.000000000 +0100
@@ -9,6 +9,7 @@
 # Copyright (C) 2006-2007 SURFnet B.V. http://www.surfnet.nl
 # Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
 # Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
 # Copyright (C) 2009 Tilburg University http://www.uvt.nl
 # Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
@@ -34,7 +35,8 @@
 
 import unittest, os
 from time import strftime, gmtime
-from os.path import isfile
+from os import makedirs
+from os.path import isfile, isdir, join
 from shutil import rmtree
 from tempfile import mkdtemp
 
@@ -54,13 +56,13 @@
         rmtree(self.logDir)
 
     def testSameDate(self):
-        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir,name='someuni')
+        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name='someuni')
         date=logger._state.getTime()[:10]
         self.assertTrue(logger.isCurrentDay(date))
         self.assertFalse(logger.isCurrentDay('2005-01-02'))
 
     def testHasWork(self):
-        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir,name='someuni')
+        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name='someuni')
         self.assertEqual((None,None,0),(logger.from_,logger.token,logger.total))
         self.assert_(logger.hasWork())
         logger.from_=strftime('%Y-%m-%d', gmtime())
@@ -73,12 +75,12 @@
         self.assert_(logger.hasWork())
 
     def testHasWorkBeforeAndAfterDoingWork(self):
-        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir,name= 'name')
+        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name= 'name')
         self.assertTrue(logger.hasWork())
         logger.startRepository()
         logger.endRepository(None)
         logger.close()
-        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir,name= 'name')
+        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name= 'name')
         self.assertFalse(logger.hasWork())
 
     def testLoggingAlwaysStartsNewline(self):
@@ -86,36 +88,37 @@
         f = open(self.stateDir+'/name.stats','w')
         f.write('Started: 2005-01-02 16:12:56, Harvested/Uploaded/Total: 199/200/1650, Don"crack"')
         f.close()
-        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir,name= 'name')
+        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name= 'name')
         logger.startRepository()
         logger.close()
         lines = open(self.stateDir+'/name.stats').readlines()
         self.assertEqual(2,len(lines))
 
     def testLogLine(self):
-        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir,name= 'name')
+        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name= 'name')
         logger.startRepository()
         logger.notifyHarvestedRecord("name:uploadId1")
         logger.uploadIdentifier("name:uploadId1")
         logger.notifyHarvestedRecord("name:uploadId1")
         logger.deleteIdentifier("name:uploadId1")
         logger.notifyHarvestedRecord("name:uploadId2")
-        logger.ignoreIdentifier("name:uploadId2", "Test Exception")
+        logger.logInvalidData("name:uploadId2", "Test Exception")
+        logger.logIgnoredIdentifierWarning("name:uploadId2")
         logger.endRepository(None)
         logger.close()
-        lines = open(self.stateDir+'/name.stats').readlines()
-        eventline = open(self.logDir+'/name.events').readlines()[1].strip()
-        ignoredUploadId2 = open(self.logDir+'/ignored/name/uploadId2').read()
+        lines = open(self.stateDir + '/name.stats').readlines()
+        eventline = open(self.logDir + '/name.events').readlines()[1].strip()
+        invalidUploadId2 = open(self.logDir + '/invalid/name/uploadId2').read()
         #Total is now counted based upon the id's
         self.assertTrue('3/1/1/0, Done:' in lines[0], lines[0])
         date, event, id, comments = LOGLINE_RE.match(eventline).groups()
         self.assertEquals('SUCCES', event.strip())
         self.assertEquals('name', id)
         self.assertEquals('Harvested/Uploaded/Deleted/Total: 3/1/1/0, ResumptionToken: None', comments)
-        self.assertEquals('Test Exception', ignoredUploadId2) 
+        self.assertEquals('Test Exception', invalidUploadId2) 
 
     def testLogLineError(self):
-        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir,name='name')
+        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name='name')
         logger.startRepository()
         try:
             logger.notifyHarvestedRecord("name:uploadId1")
@@ -140,7 +143,7 @@
         f = open(self.stateDir+'/name.ids','w')
         f.writelines(['id:1\n','id:2\n','id:1\n'])
         f.close()
-        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir,name= 'name')
+        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name= 'name')
         logger.startRepository()
         self.assertEquals(2,logger.totalIds())
         logger.uploadIdentifier('id:3')
@@ -149,55 +152,70 @@
         logger.uploadIdentifier('id:2')
         self.assertEquals(3,logger.totalIds())
 
-    def testLogIgnoredID(self):
+    def testLogIgnoredIdentifierWarning(self):
         logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name='name')
         logger.startRepository()
         logger.notifyHarvestedRecord('repoid:oai:bla/bla')
-        logger.ignoreIdentifier('repoid:oai:bla/bla', "Error")
-        self.assertEquals(1, logger.totalIgnoredIds())
-        self.assertEquals("Error", open(self.logDir+'/ignored/repoid/oai:bla%2Fbla').read())
+        logger.logInvalidData('repoid:oai:bla/bla', 'bla/bla')
+        self.assertEquals('', open(self.logDir + '/name.events').read())
+        logger.logIgnoredIdentifierWarning('repoid:oai:bla/bla')
+        self.assertTrue(open(self.logDir + '/name.events').read().endswith("\tWARNING\t[repoid:oai:bla/bla]\tIGNORED\n"))
+        self.assertEquals(1, logger.totalInvalidIds())
+
         logger.notifyHarvestedRecord('repoid:oai:bla/bla')
-        self.assertEquals(0, logger.totalIgnoredIds())
+        self.assertEquals(0, logger.totalInvalidIds())
         logger.uploadIdentifier('repoid:oai:bla/bla')
         self.assertEquals(1, logger.totalIds())
 
-    def testListIgnoredIDs(self):
+    def testLogInvalidData(self):
+        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name='name')
+        logger.startRepository()
+        logger.notifyHarvestedRecord('repoid:oai:bla/bla')
+        logger.logInvalidData('repoid:oai:bla/bla', "Error")
+        self.assertEquals(1, logger.totalInvalidIds())
+        expectedFile = self.logDir + '/invalid/repoid/oai:bla%2Fbla'
+        self.assertEquals("Error", open(expectedFile).read())
+        logger.notifyHarvestedRecord('repoid:oai:bla/bla')
+        self.assertEquals(0, logger.totalInvalidIds())
+        self.assertFalse(isfile(expectedFile))
+
+    def testInvalidIDs(self):
         logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name='name')
         logger.startRepository()
         logger.notifyHarvestedRecord('id:1')
-        logger.ignoreIdentifier('id:1', "Error")
+        logger.logInvalidData('id:1', 'exception message')
         logger.notifyHarvestedRecord('id:2')
-        logger.ignoreIdentifier('id:2', "Error")
-        self.assertEquals(['id:1', 'id:2'], logger.ignoredIds())
+        logger.logInvalidData('id:2', 'exception message')
+        self.assertEquals(['id:1', 'id:2'], logger.invalidIds())
         
-    def testClearIgnored(self):
+    def testClearInvalidData(self):
         logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name='name')
         logger.startRepository()
         logger.notifyHarvestedRecord('repoid:oai:bla/bla')
-        logger.ignoreIdentifier('repoid:oai:bla/bla', "Error")
-        self.assertTrue(isfile(self.logDir + '/ignored/repoid/oai:bla%2Fbla'))
+        logger.logInvalidData('repoid:oai:bla/bla', "Error")
+        self.assertTrue(isfile(self.logDir + '/invalid/repoid/oai:bla%2Fbla'))
         logger.notifyHarvestedRecord('repoid:recordid')
-        logger.ignoreIdentifier('repoid:recordid', "Error")
-        self.assertTrue(isfile(self.logDir + '/ignored/repoid/recordid'))
+        logger.logInvalidData('repoid:recordid', "Error")
+        self.assertTrue(isfile(self.logDir + '/invalid/repoid/recordid'))
         logger.notifyHarvestedRecord('repo2:1')
-        logger.ignoreIdentifier('repo2:1', "Error")
-        self.assertTrue(isfile(self.logDir + '/ignored/repo2/1'))
-        self.assertEquals(['repoid:oai:bla/bla', 'repoid:recordid', 'repo2:1'], logger.ignoredIds())
-        logger.clearIgnored('repoid')
-        self.assertEquals(['repo2:1'], logger.ignoredIds())
-        self.assertFalse(isfile(self.logDir + '/ignored/repoid/oai:bla%2Fbla'))
-        self.assertFalse(isfile(self.logDir + '/ignored/repoid/recordid'))
-        self.assertTrue(isfile(self.logDir + '/ignored/repo2/1'))
+        logger.logInvalidData('repo2:1', "Error")
+        self.assertTrue(isfile(self.logDir + '/invalid/repo2/1'))
+        self.assertEquals(['repoid:oai:bla/bla', 'repoid:recordid', 'repo2:1'], logger.invalidIds())
+        logger.clearInvalidData('repoid')
+        self.assertEquals(['repo2:1'], logger.invalidIds())
+        self.assertFalse(isfile(self.logDir + '/invalid/repoid/oai:bla%2Fbla'))
+        self.assertFalse(isfile(self.logDir + '/invalid/repoid/recordid'))
+        self.assertTrue(isfile(self.logDir + '/invalid/repo2/1'))
 
     def testLogDeleted(self):
-        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir,name='emptyrepoi')
+        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name='emptyrepoi')
         self.assertEquals(None,logger.from_)
         self.assertEquals(0, logger.total)
         self.assertEquals(None, logger.token)
         f = open(self.stateDir+'/name.stats','w')
         f.write('Started: 2005-01-02 16:12:56, Harvested/Uploaded/Total: 199/200/1650, Done: 2005-04-22 11:48:30, ResumptionToken: resumption')
         f.close()
-        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir,name='name')
+        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name='name')
         self.assertEquals('2005-01-02',logger.from_)
         self.assertEquals(1650, logger.total)
         self.assertEquals('resumption', logger.token)
@@ -205,7 +223,7 @@
         f.write('Started: 2005-01-02 16:12:56, Harvested/Uploaded/Total: 199/200/1650, Done: 2005-04-22 11:48:30, ResumptionToken: resumption\n')
         f.write('Started: 2005-01-02 16:12:56, Harvested/Uploaded/Deleted/Total: 0/0/0/0, Done: Deleted all id\'s\n')
         f.close()
-        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir,name='name')
+        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name='name')
         self.assertEquals(None, logger.token)
         self.assertEquals(None,logger.from_)
         self.assertEquals(0, logger.total)
@@ -214,11 +232,11 @@
         f = open(self.stateDir+'/name.stats','w')
         f.write('Started: 2005-01-02 16:12:56, Harvested/Uploaded/Total: 199/200/1650, Done: 2005-04-22 11:48:30, ResumptionToken: resumption')
         f.close()
-        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir,name='name')
+        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name='name')
         self.assertEquals('resumption', logger.token)
         logger.markDeleted()
         logger.close()
-        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir,name='name')
+        logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name='name')
         self.assertEquals(None, logger.token)
         self.assertEquals(None,logger.from_)
         self.assertEquals(0, logger.total)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/harvestertest.py version_1/test/harvestertest.py
--- version_0/test/harvestertest.py	2011-11-11 11:10:13.000000000 +0100
+++ version_1/test/harvestertest.py	2011-11-14 14:07:37.000000000 +0100
@@ -350,13 +350,13 @@
         upload = Upload(record=record)
         upload.id = 'mockid'
         observer.returnValues['createUpload'] = upload
-        observer.returnValues['totalIgnoredIds'] = 100
+        observer.returnValues['totalInvalidIds'] = 101
         observer.exceptions['send'] =  InvalidDataException(upload.id, "message")
         repository=CallTrace("repository", returnValues={'maxIgnore': 100})
         harvester = Harvester(repository)
         harvester.addObserver(observer)
         self.assertRaises(TooMuchInvalidDataException, lambda: harvester.uploadRecord(record))
-        self.assertEquals(['createUpload', "notifyHarvestedRecord", "send", "totalIgnoredIds"], [m.name for m in observer.calledMethods])
+        self.assertEquals(['createUpload', "notifyHarvestedRecord", "send", "logInvalidData", "totalInvalidIds"], [m.name for m in observer.calledMethods])
 
     def testHarvesterIgnoringInvalidDataErrors(self):
         record = parse_xml("""<record><header><identifier>mockid</identifier></header><metadata><dc><title>mocktitle</title></dc></metadata><about/></record>""").record
@@ -364,13 +364,13 @@
         upload = Upload(record=record)
         upload.id = 'mockid'
         observer.returnValues['createUpload'] = upload
-        observer.returnValues['totalIgnoredIds'] = 0
+        observer.returnValues['totalInvalidIds'] = 0
         observer.exceptions['send'] =  InvalidDataException(upload.id, "message")
         repository=CallTrace("repository", returnValues={'maxIgnore': 100})
         harvester = Harvester(repository)
         harvester.addObserver(observer)
         harvester.uploadRecord(record)
-        self.assertEquals(['createUpload', "notifyHarvestedRecord", "send", "totalIgnoredIds", 'ignoreIdentifier'], [m.name for m in observer.calledMethods])
+        self.assertEquals(['createUpload', "notifyHarvestedRecord", "send", 'logInvalidData', "totalInvalidIds", 'logIgnoredIdentifierWarning'], [m.name for m in observer.calledMethods])
 
     #self shunt:
     def send(self, upload):
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/integration/harvestertest.py version_1/test/integration/harvestertest.py
--- version_0/test/integration/harvestertest.py	2011-11-11 11:10:13.000000000 +0100
+++ version_1/test/integration/harvestertest.py	2011-11-14 14:07:37.000000000 +0100
@@ -78,8 +78,8 @@
         self.assertEquals(2, len([f for f in listdir(self.dumpDir) if "info:srw/action/1/delete" in open(join(self.dumpDir, f)).read()]))
         ids = open(join(self.harvesterStateDir, DOMAIN, "%s.ids" % REPOSITORY)).readlines()
         self.assertEquals(8, len(ids))
-        ignoredIds = open(join(self.harvesterStateDir, DOMAIN, "%s_ignored.ids" % REPOSITORY)).readlines()
-        self.assertEquals(0, len(ignoredIds))
+        invalidIds = open(join(self.harvesterStateDir, DOMAIN, "%s_invalid.ids" % REPOSITORY)).readlines()
+        self.assertEquals(0, len(invalidIds))
         logs = self.getLogs()
         self.assertEquals(1, len(logs))
         self.assertEquals('/oai', logs[-1]['path'])
@@ -193,7 +193,7 @@
 
     def testInvalidIgnoredUptoMaxIgnore(self):
         maxIgnore = 5
-        self.controlHelper(action='ignoreAll')
+        self.controlHelper(action='allInvalid')
         nrOfDeleted = 2
         r = RepositoryData.read(self.repofilepath)
         r.maximumIgnore = "%s" % maxIgnore
@@ -202,20 +202,20 @@
         self.assertEquals(nrOfDeleted, self.sizeDumpDir())
         ids = open(join(self.harvesterStateDir, DOMAIN, "%s.ids" % REPOSITORY)).readlines()
         self.assertEquals(0, len(ids))
-        ignoredIds = open(join(self.harvesterStateDir, DOMAIN, "%s_ignored.ids" % REPOSITORY)).readlines()
-        self.assertEquals(maxIgnore, len(ignoredIds), ignoredIds)
-        ignoreDir = join(self.harvesterLogDir, DOMAIN, "ignored", REPOSITORY)
-        self.assertEquals(maxIgnore, len(listdir(ignoreDir)))
-        ignoreId1Error = open(join(ignoreDir, "oai:record:01")).read()
-        self.assertTrue('uploadId: "integrationtest:oai:record:01"', ignoreId1Error)
-        self.controlHelper(action='ignoreNothing')
+        invalidIds = open(join(self.harvesterStateDir, DOMAIN, "%s_invalid.ids" % REPOSITORY)).readlines()
+        self.assertEquals(maxIgnore + 1, len(invalidIds), invalidIds)
+        invalidDataMessagesDir = join(self.harvesterLogDir, DOMAIN, "invalid", REPOSITORY)
+        self.assertEquals(maxIgnore + 1, len(listdir(invalidDataMessagesDir)))
+        invalidDataMessage01 = open(join(invalidDataMessagesDir, "oai:record:01")).read()
+        self.assertTrue('uploadId: "integrationtest:oai:record:01"', invalidDataMessage01)
+        self.controlHelper(action='noneInvalid')
         self.startHarvester(repository=REPOSITORY)
         self.assertEquals(nrOfDeleted + BATCHSIZE, self.sizeDumpDir()) 
         ids = open(join(self.harvesterStateDir, DOMAIN, "%s.ids" % REPOSITORY)).readlines()
         self.assertEquals(BATCHSIZE - nrOfDeleted, len(ids))
-        ignoredIds = open(join(self.harvesterStateDir, DOMAIN, "%s_ignored.ids" % REPOSITORY)).readlines()
-        self.assertEquals(0, len(ignoredIds), ignoredIds)
-        self.assertEquals(0, len(listdir(ignoreDir)))
+        invalidIds = open(join(self.harvesterStateDir, DOMAIN, "%s_invalid.ids" % REPOSITORY)).readlines()
+        self.assertEquals(0, len(invalidIds), invalidIds)
+        self.assertEquals(0, len(listdir(invalidDataMessagesDir)))
 
     def testHarvestToFilesystemTarget(self):
         r = RepositoryData.read(self.repofilepath)
@@ -289,7 +289,8 @@
             log.deleteIdentifier(uploadId)
         for uploadId in ['%s:oai:record:%02d' % (REPOSITORY, i) for i in [7,8,125,126,127,128]]:
             log.notifyHarvestedRecord(uploadId)
-            log.ignoreIdentifier(uploadId, 'ignored message')
+            log.logInvalidData(uploadId, 'ignored message')
+            log.logIgnoredIdentifierWarning(uploadId)
         log.endRepository('token')
         log.close()
         totalRecords = 15
@@ -308,12 +309,12 @@
         self.assertEquals(totalRecords, self.sizeDumpDir())
         self.startHarvester(repository=REPOSITORY) # Smooth finish
         self.assertEquals(totalRecords + oldUploads + oldIgnoreds, self.sizeDumpDir())
-        ignoredIds = open(join(self.harvesterStateDir, DOMAIN, "%s_ignored.ids" % REPOSITORY)).readlines()
-        self.assertEquals(0, len(ignoredIds), ignoredIds)
+        invalidIds = open(join(self.harvesterStateDir, DOMAIN, "%s_invalid.ids" % REPOSITORY)).readlines()
+        self.assertEquals(0, len(invalidIds), invalidIds)
         ids = open(join(self.harvesterStateDir, DOMAIN, "%s.ids" % REPOSITORY)).readlines()
         self.assertEquals(13, len(ids), ids)
 
-    def testClearWithIgnoredRecords(self):
+    def testClearWithInvalidRecords(self):
         log = HarvesterLog(stateDir=join(self.harvesterStateDir, DOMAIN), logDir=join(self.harvesterLogDir, DOMAIN), name=REPOSITORY)
         log.startRepository()
         for uploadId in ['%s:oai:record:%02d' % (REPOSITORY, i) for i in [1,2,120,121]]:
@@ -324,21 +325,22 @@
             log.deleteIdentifier(uploadId)
         for uploadId in ['%s:oai:record:%02d' % (REPOSITORY, i) for i in [7,8,125,126,127,128]]:
             log.notifyHarvestedRecord(uploadId)
-            log.ignoreIdentifier(uploadId, 'ignored message')
+            log.logInvalidData(uploadId, 'ignored message')
+            log.logIgnoredIdentifierWarning(uploadId)
         log.endRepository('token')
         log.close()
         oldUploads = 4
         oldDeletes = 5
-        oldIgnoreds = 6
+        oldInvalids = 6
 
         r = RepositoryData.read(self.repofilepath)
         r.action='clear'
         r.save(self.repofilepath)
         
         self.startHarvester(repository=REPOSITORY)
-        self.assertEquals(oldUploads+oldIgnoreds, self.sizeDumpDir())
-        ignoredIds = open(join(self.harvesterStateDir, DOMAIN, "%s_ignored.ids" % REPOSITORY)).readlines()
-        self.assertEquals(0, len(ignoredIds), ignoredIds)
+        self.assertEquals(oldUploads+oldInvalids, self.sizeDumpDir())
+        invalidIds = open(join(self.harvesterStateDir, DOMAIN, "%s_invalid.ids" % REPOSITORY)).readlines()
+        self.assertEquals(0, len(invalidIds), invalidIds)
         ids = open(join(self.harvesterStateDir, DOMAIN, "%s.ids" % REPOSITORY)).readlines()
         self.assertEquals(0, len(ids), ids)
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/integration/helperserver.py version_1/test/integration/helperserver.py
--- version_0/test/integration/helperserver.py	2011-11-11 11:10:13.000000000 +0100
+++ version_1/test/integration/helperserver.py	2011-11-14 14:07:37.000000000 +0100
@@ -57,14 +57,14 @@
     def __init__(self, dumpdir):
         self._dumpdir = dumpdir
         self._number = self._findLastNumber()
-        self._ignoreAll = False
+        self._allInvalid = False
         self._raiseExceptionOnIds = set()
 
     def handleRequest(self, Body='', **kwargs):
         yield '\r\n'.join(['HTTP/1.0 200 Ok', 'Content-Type: text/xml, charset=utf-8\r\n', ''])
         try:
             updateRequest = bind_string(Body).updateRequest
-            if self._ignoreAll and str(updateRequest.action) == "info:srw/action/1/replace":
+            if self._allInvalid and str(updateRequest.action) == "info:srw/action/1/replace":
                 raise InvalidDataException('Data not valid.')
             recordId = str(updateRequest.recordIdentifier)
             if recordId in self._raiseExceptionOnIds:
@@ -99,17 +99,17 @@
         return max([int(basename(f)[:5]) for f in glob(join(self._dumpdir, '*.updateRequest'))]+[0])
 
     def reset(self):
-        self._ignoreAll = False
+        self._allInvalid = False
         for f in glob(join(self._dumpdir, '*.updateRequest')):
             remove(f)
         self._number = 0
         self._raiseExceptionOnIds = set()
 
-    def ignoreAll(self):
-        self._ignoreAll = True
+    def allInvalid(self):
+        self._allInvalid = True
 
-    def ignoreNothing(self):
-        self._ignoreAll = False
+    def noneInvalid(self):
+        self._allInvalid = False
 
     def raiseExceptionOnIds(self, ids):
         self._raiseExceptionOnIds = set(ids)
@@ -122,10 +122,10 @@
             self.do.reset()
         if action == "raiseExceptionOnIds":
             self.do.raiseExceptionOnIds(arguments.get('id',[]))
-        if action == "ignoreNothing":
-            self.do.ignoreNothing()
-        if action == "ignoreAll":
-            self.do.ignoreAll()
+        if action == "noneInvalid":
+            self.do.noneInvalid()
+        if action == "allInvalid":
+            self.do.allInvalid()
         yield "DONE"
 
 logLines = []
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/integration/integrationtestcase.py version_1/test/integration/integrationtestcase.py
--- version_0/test/integration/integrationtestcase.py	2011-11-11 11:10:13.000000000 +0100
+++ version_1/test/integration/integrationtestcase.py	2011-11-14 14:07:37.000000000 +0100
@@ -152,7 +152,7 @@
         stdoutfile = join(self.integrationTempdir, "stdouterr-helper.log")
         stdouterrlog = open(stdoutfile, 'w')
         processInfo = Popen(
-            args=["python", join(mypath, "helperserver.py"), str(self.helperServerPortNumber), self.helperDir], 
+            args=["python2.5", join(mypath, "helperserver.py"), str(self.helperServerPortNumber), self.helperDir], 
             env={'PYTHONPATH': harvesterDir, 'LANG': 'en_US.UTF-8'},
             cwd=self.integrationTempdir, 
             stdout=stdouterrlog,
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/integration/internalservertest.py version_1/test/integration/internalservertest.py
--- version_0/test/integration/internalservertest.py	2011-11-11 11:10:13.000000000 +0100
+++ version_1/test/integration/internalservertest.py	2011-11-14 14:07:37.000000000 +0100
@@ -45,40 +45,40 @@
         system("rm -rf %s" % self.harvesterLogDir)
         system("rm -rf %s" % self.harvesterStateDir)
 
-    def testListIgnoredRecordsForOneRepository(self):
-        self.controlHelper(action='ignoreAll')
+    def testListInvalidRecordsForOneRepository(self):
+        self.controlHelper(action='allInvalid')
         self.startHarvester(repository=REPOSITORY)
-        header, result = getRequest(self.harvesterInternalServerPortNumber, '/ignored', {'domainId': 'adomain', 'repositoryId': 'integrationtest'}, parse='lxml')
-        self.assertEquals(['oai:record:07', 'oai:record:05', 'oai:record:04', 'oai:record:02', 'oai:record:01'], result.xpath("/div/table/tr/td[@class='link']/a/text()"))
-        self.assertEquals("/page/ignoredRecord/?recordId=oai%3Arecord%3A07&domainId=adomain&repositoryId=integrationtest", result.xpath("/div/table/tr/td[@class='link']/a")[0].attrib['href'])
+        header, result = getRequest(self.harvesterInternalServerPortNumber, '/invalid', {'domainId': 'adomain', 'repositoryId': 'integrationtest'}, parse='lxml')
+        self.assertEquals(['oai:record:08', 'oai:record:07', 'oai:record:05', 'oai:record:04', 'oai:record:02', 'oai:record:01'], result.xpath("/div/table/tr/td[@class='link']/a/text()"))
+        self.assertEquals("/page/invalidRecord/?recordId=oai%3Arecord%3A08&domainId=adomain&repositoryId=integrationtest", result.xpath("/div/table/tr/td[@class='link']/a")[0].attrib['href'])
         self.assertEquals("/page/showHarvesterStatus/show?domainId=adomain&repositoryId=integrationtest", result.xpath("/div/p/a/@href")[0])
 
-    def testViewIgnoredRecord(self):
-        self.controlHelper(action='ignoreAll')
+    def testViewInvalidRecord(self):
+        self.controlHelper(action='allInvalid')
         self.startHarvester(repository=REPOSITORY)
-        header, result = getRequest(self.harvesterInternalServerPortNumber, '/ignoredRecord', {'domainId': 'adomain', 'repositoryId': 'integrationtest', 'recordId': 'oai:record:02'}, parse='lxml')
+        header, result = getRequest(self.harvesterInternalServerPortNumber, '/invalidRecord', {'domainId': 'adomain', 'repositoryId': 'integrationtest', 'recordId': 'oai:record:02'}, parse='lxml')
         self.assertEquals("Repository integrationtest - Record oai:record:02", result.xpath("//h3/text()")[0])
-        self.assertEquals("/page/ignored/?domainId=adomain&repositoryId=integrationtest", result.xpath("/div/p/a/@href")[0])
+        self.assertEquals("/page/invalid/?domainId=adomain&repositoryId=integrationtest", result.xpath("/div/p/a/@href")[0])
 
     def testGetStatusForDomainAndRepositoryId(self):
-        self.controlHelper(action='ignoreAll')
+        self.controlHelper(action='allInvalid')
         self.startHarvester(repository=REPOSITORY)
         header, result = getRequest(self.harvesterInternalServerPortNumber, '/getStatus', {'domainId': 'adomain', 'repositoryId': 'integrationtest'}, parse='lxml')
         self.assertEquals("GetStatus", xpath(result, "/status:saharaget/status:request/status:verb/text()")[0])
         self.assertEquals("adomain", xpath(result, "/status:saharaget/status:request/status:domainId/text()")[0])
         self.assertEquals("integrationtest", xpath(result, "/status:saharaget/status:request/status:repositoryId/text()")[0])
         self.assertEquals("IntegrationTest", xpath(result, "/status:saharaget/status:GetStatus/status:status/@repositoryGroupId")[0])
-        self.assertEquals("5", xpath(result, "/status:saharaget/status:GetStatus/status:status[@repositoryId='integrationtest']/status:ignored/text()")[0])
+        self.assertEquals("6", xpath(result, "/status:saharaget/status:GetStatus/status:status[@repositoryId='integrationtest']/status:invalid/text()")[0])
         
     def testGetStatusForDomain(self):
-        self.controlHelper(action='ignoreAll')
+        self.controlHelper(action='allInvalid')
         self.startHarvester(repository=REPOSITORY)
         header, result = getRequest(self.harvesterInternalServerPortNumber, '/getStatus', {'domainId': 'adomain'}, parse='lxml')
         self.assertEquals(2, len(xpath(result, "/status:saharaget/status:GetStatus/status:status")))
         self.assertEquals("adomain", xpath(result, "/status:saharaget/status:request/status:domainId/text()")[0])
 
     def testGetStatusForDomainAndRepositoryGroup(self):
-        self.controlHelper(action='ignoreAll')
+        self.controlHelper(action='allInvalid')
         self.startHarvester(repository=REPOSITORY)
         header, result = getRequest(self.harvesterInternalServerPortNumber, '/getStatus', {'domainId': 'adomain', 'repositoryGroupId': 'IntegrationTest'}, parse='lxml')
         self.assertEquals(1, len(xpath(result, "/status:saharaget/status:GetStatus/status:status")))
@@ -86,7 +86,7 @@
         self.assertEquals("IntegrationTest", xpath(result, "/status:saharaget/status:request/status:repositoryGroupId/text()")[0])
 
     def testRssForHarvesterStatus(self):
-        self.controlHelper(action="ignoreNothing")
+        self.controlHelper(action="noneInvalid")
         self.startHarvester(repository=REPOSITORY)
         header, result = getRequest(self.harvesterInternalServerPortNumber, '/rss', {'domainId': 'adomain', 'repositoryId': 'integrationtest'}, parse='lxml')
         self.assertEquals("Harvester status voor integrationtest", xpath(result, "/rss/channel/title/text()")[0])
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/repositorystatustest.py version_1/test/repositorystatustest.py
--- version_0/test/repositorystatustest.py	2011-11-11 11:10:13.000000000 +0100
+++ version_1/test/repositorystatustest.py	2011-11-14 14:07:37.000000000 +0100
@@ -39,24 +39,24 @@
 from lxml.etree import tostring, parse
 from StringIO import StringIO
 
-class RepositoryStatusTest(CQ2TestCase):
 
+class RepositoryStatusTest(CQ2TestCase):
     def setUp(self):
         CQ2TestCase.setUp(self)
         self.stateDir = join(self.tempdir, "state")
         self.logDir = join(self.tempdir, "log")
         self.domainId = "adomain"
         makedirs(join(self.stateDir, self.domainId))
-        repoId1LogDir = join(self.logDir, self.domainId, "ignored", "repoId1")
-        repoId2LogDir = join(self.logDir, self.domainId, "ignored", "repoId2")
+        repoId1LogDir = join(self.logDir, self.domainId, "invalid", "repoId1")
+        repoId2LogDir = join(self.logDir, self.domainId, "invalid", "repoId2")
         makedirs(repoId1LogDir)
         makedirs(repoId2LogDir)
-        open(join(repoId1LogDir, "ignoredId1"), 'w').write("<diagnostic>ERROR1</diagnostic>")
-        open(join(repoId1LogDir, "ignoredId2"), 'w').write("<diagnostic>ERROR2</diagnostic>")
-        open(join(repoId2LogDir, "ignoredId3"), 'w').write("<diagnostic>ERROR3</diagnostic>")
-        open(join(self.stateDir, self.domainId, "repoId1_ignored.ids"), 'w').write("ignoredId1\nignoredId2")
-        open(join(self.stateDir, self.domainId, "repoId2_ignored.ids"), 'w').write("ignoredId3")
-        open(join(self.stateDir, self.domainId, "repoId3_ignored.ids"), 'w').write("")
+        open(join(repoId1LogDir, "invalidId1"), 'w').write("<diagnostic>ERROR1</diagnostic>")
+        open(join(repoId1LogDir, "invalidId2"), 'w').write("<diagnostic>ERROR2</diagnostic>")
+        open(join(repoId2LogDir, "invalidId3"), 'w').write("<diagnostic>ERROR3</diagnostic>")
+        open(join(self.stateDir, self.domainId, "repoId1_invalid.ids"), 'w').write("invalidId1\ninvalidId2")
+        open(join(self.stateDir, self.domainId, "repoId2_invalid.ids"), 'w').write("invalidId3")
+        open(join(self.stateDir, self.domainId, "repoId3_invalid.ids"), 'w').write("")
         self.status = RepositoryStatus(self.logDir, self.stateDir)
         observer = CallTrace("HarvesterData")
         observer.returnValues["getRepositoryGroupIds"] = ["repoGroupId1", "repoGroupId2"]
@@ -80,11 +80,11 @@
                 <total></total>
                 <totalerrors>0</totalerrors>
                 <recenterrors></recenterrors>
-                <ignored>2</ignored>
-                <recentignores>
-                    <ignoredId>ignoredId2</ignoredId>
-                    <ignoredId>ignoredId1</ignoredId>
-                </recentignores>
+                <invalid>2</invalid>
+                <recentinvalids>
+                    <invalidId>invalidId2</invalidId>
+                    <invalidId>invalidId1</invalidId>
+                </recentinvalids>
                 <lastHarvestAttempt></lastHarvestAttempt>
             </status>
         </GetStatus>""", ''.join(compose(self.status.getStatus(domainId=self.domainId, repositoryId="repoId1"))))
@@ -97,8 +97,8 @@
                 <total></total>
                 <totalerrors>0</totalerrors>
                 <recenterrors></recenterrors>
-                <ignored>0</ignored>
-                <recentignores></recentignores>
+                <invalid>0</invalid>
+                <recentinvalids></recentinvalids>
                 <lastHarvestAttempt></lastHarvestAttempt>
             </status>
         </GetStatus>""", ''.join(compose(self.status.getStatus(domainId=self.domainId, repositoryId="anotherRepoId"))))
@@ -113,11 +113,11 @@
                 <total></total>
                 <totalerrors>0</totalerrors>
                 <recenterrors></recenterrors>
-                <ignored>2</ignored>
-                <recentignores>
-                    <ignoredId>ignoredId2</ignoredId>
-                    <ignoredId>ignoredId1</ignoredId>
-                </recentignores>
+                <invalid>2</invalid>
+                <recentinvalids>
+                    <invalidId>invalidId2</invalidId>
+                    <invalidId>invalidId1</invalidId>
+                </recentinvalids>
                 <lastHarvestAttempt></lastHarvestAttempt>
             </status>
             <status repositoryId="repoId2" repositoryGroupId="repoGroupId1">
@@ -128,10 +128,10 @@
                 <total></total>
                 <totalerrors>0</totalerrors>
                 <recenterrors></recenterrors>
-                <ignored>1</ignored>
-                <recentignores>
-                    <ignoredId>ignoredId3</ignoredId>
-                </recentignores>
+                <invalid>1</invalid>
+                <recentinvalids>
+                    <invalidId>invalidId3</invalidId>
+                </recentinvalids>
                 <lastHarvestAttempt></lastHarvestAttempt>
             </status>
             </GetStatus>""", ''.join(compose(self.status.getStatus(domainId=self.domainId, repositoryGroupId="repoGroupId1"))))
@@ -146,11 +146,11 @@
                 <total></total>
                 <totalerrors>0</totalerrors>
                 <recenterrors></recenterrors>
-                <ignored>2</ignored>
-                <recentignores>
-                    <ignoredId>ignoredId2</ignoredId>
-                    <ignoredId>ignoredId1</ignoredId>
-                </recentignores>
+                <invalid>2</invalid>
+                <recentinvalids>
+                    <invalidId>invalidId2</invalidId>
+                    <invalidId>invalidId1</invalidId>
+                </recentinvalids>
                 <lastHarvestAttempt></lastHarvestAttempt>
             </status>
             <status repositoryId="repoId2" repositoryGroupId="repoGroupId1">
@@ -161,10 +161,10 @@
                 <total></total>
                 <totalerrors>0</totalerrors>
                 <recenterrors></recenterrors>
-                <ignored>1</ignored>
-                <recentignores>
-                    <ignoredId>ignoredId3</ignoredId>
-                </recentignores>
+                <invalid>1</invalid>
+                <recentinvalids>
+                    <invalidId>invalidId3</invalidId>
+                </recentinvalids>
                 <lastHarvestAttempt></lastHarvestAttempt>
             </status>
             <status repositoryId="repoId3" repositoryGroupId="repoGroupId2">
@@ -175,8 +175,8 @@
                 <total></total>
                 <totalerrors>0</totalerrors>
                 <recenterrors></recenterrors>
-                <ignored>0</ignored>
-                <recentignores></recentignores>
+                <invalid>0</invalid>
+                <recentinvalids></recentinvalids>
                 <lastHarvestAttempt></lastHarvestAttempt>
             </status>
             <status repositoryId="anotherRepoId" repositoryGroupId="repoGroupId2">
@@ -187,34 +187,34 @@
                 <total></total>
                 <totalerrors>0</totalerrors>
                 <recenterrors></recenterrors>
-                <ignored>0</ignored>
-                <recentignores></recentignores>
+                <invalid>0</invalid>
+                <recentinvalids></recentinvalids>
                 <lastHarvestAttempt></lastHarvestAttempt>
             </status>
         </GetStatus>""", ''.join(compose(self.status.getStatus(self.domainId))))
 
-    def testGetAllIgnoredRecords(self):
-        def ignoredRecords(repoId):
-            return list(self.status.ignoredRecords(self.domainId, repoId))
-        self.assertEquals(["ignoredId2", "ignoredId1"], ignoredRecords("repoId1"))
-        self.assertEquals(["ignoredId3"], ignoredRecords("repoId2"))
-        self.assertEquals([], ignoredRecords("repoId3"))
-        self.assertEquals([], ignoredRecords("repoId4"))
-
-    def testGetIgnoredRecord(self):
-        def getIgnoredRecord(repoId, recordId):
-            return tostring(self.status.getIgnoredRecord(self.domainId, repoId, recordId)) 
-        self.assertEquals("<diagnostic>ERROR1</diagnostic>", getIgnoredRecord("repoId1", "ignoredId1")) 
-        self.assertEquals("<diagnostic>ERROR2</diagnostic>", getIgnoredRecord("repoId1", "ignoredId2")) 
-        self.assertEquals("<diagnostic>ERROR3</diagnostic>", getIgnoredRecord("repoId2", "ignoredId3")) 
+    def testGetAllInvalidRecords(self):
+        def invalidRecords(repoId):
+            return list(self.status.invalidRecords(self.domainId, repoId))
+        self.assertEquals(["invalidId2", "invalidId1"], invalidRecords("repoId1"))
+        self.assertEquals(["invalidId3"], invalidRecords("repoId2"))
+        self.assertEquals([], invalidRecords("repoId3"))
+        self.assertEquals([], invalidRecords("repoId4"))
+
+    def testGetInvalidRecord(self):
+        def getInvalidRecord(repoId, recordId):
+            return tostring(self.status.getInvalidRecord(self.domainId, repoId, recordId)) 
+        self.assertEquals("<diagnostic>ERROR1</diagnostic>", getInvalidRecord("repoId1", "invalidId1")) 
+        self.assertEquals("<diagnostic>ERROR2</diagnostic>", getInvalidRecord("repoId1", "invalidId2")) 
+        self.assertEquals("<diagnostic>ERROR3</diagnostic>", getInvalidRecord("repoId2", "invalidId3")) 
 
-    def testLotOfIgnoresGivesOnly10(self):
-        with open(join(self.stateDir, self.domainId, "repoId1_ignored.ids"), 'w') as f:
+    def testRecentInvalidsOnlyGives10InCaseOfManyMoreInvalids(self):
+        with open(join(self.stateDir, self.domainId, "repoId1_invalid.ids"), 'w') as f:
             for i in range(20):
-                f.write("ignoredId%d\n" % i)
+                f.write("invalidId%d\n" % i)
         lxmlResult = parse(StringIO(''.join(compose(self.status.getStatus(domainId=self.domainId, repositoryId="repoId1")))))
-        self.assertEquals("20", lxmlResult.xpath("/GetStatus/status/ignored/text()")[0])
-        self.assertEquals(10, len(lxmlResult.xpath("/GetStatus/status/recentignores/ignoredId")))
+        self.assertEquals("20", lxmlResult.xpath("/GetStatus/status/invalid/text()")[0])
+        self.assertEquals(10, len(lxmlResult.xpath("/GetStatus/status/recentinvalids/invalidId")))
 
     def testSucces(self):
         logLine = '\t'.join(['[2006-03-13 12:13:14]', 'SUCCES', 'repoId1', 'Harvested/Uploaded/Deleted/Total: 200/199/1/1542, ResumptionToken: None'])
@@ -310,11 +310,11 @@
   <recenterrors>
     <error date="2005-08-24T20:00:00Z">Error With Scary Characters &lt; &amp; &gt; " '</error>
   </recenterrors>
-  <ignored>2</ignored>
-  <recentignores>
-    <ignoredId>ignoredId2</ignoredId>
-    <ignoredId>ignoredId1</ignoredId>
-  </recentignores>
+  <invalid>2</invalid>
+  <recentinvalids>
+    <invalidId>invalidId2</invalidId>
+    <invalidId>invalidId1</invalidId>
+  </recentinvalids>
   <lastHarvestAttempt>2005-08-24T20:00:00Z</lastHarvestAttempt>
 </status>
 </GetStatus>""", ''.join(compose(self.status.getStatus(domainId=self.domainId, repositoryId='repoId1'))))
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/smoothactiontest.py version_1/test/smoothactiontest.py
--- version_0/test/smoothactiontest.py	2011-11-11 11:10:13.000000000 +0100
+++ version_1/test/smoothactiontest.py	2011-11-14 14:07:37.000000000 +0100
@@ -46,6 +46,7 @@
 from meresco.harvester.eventlogger import NilEventLogger
 from cq2utils import CallTrace
 
+
 class SmoothActionTest(ActionTestCase):
     def setUp(self):
         ActionTestCase.setUp(self)
@@ -56,13 +57,13 @@
         self.logDir = self.tempdir
         self.smoothaction = SmoothAction(self.repo, self.stateDir, self.logDir, NilEventLogger())
         self.idfilename = join(self.stateDir, 'rep.ids')
-        self.ignoreidfilename = join(self.stateDir, 'rep_ignored.ids')
+        self.invalidIdsFilename = join(self.stateDir, 'rep_invalid.ids')
         self.old_idfilename = join(self.stateDir, 'rep.ids.old')
         self.statsfilename = join(self.stateDir,'rep.stats')
 
     def testSmooth_Init(self):
         writefile(self.idfilename, 'rep:id:1\nrep:id:2\n')
-        writefile(self.ignoreidfilename, 'rep:id:3\n')
+        writefile(self.invalidIdsFilename, 'rep:id:3\n')
         writefile(self.statsfilename, 'Started: 2005-12-22 16:33:39, Harvested/Uploaded/Deleted/Total: 10/10/0/2, Done: ResumptionToken:\n')
 
         self.assertFalse(os.path.isfile(self.old_idfilename))
@@ -79,7 +80,7 @@
 
     def testSmooth_InitWithNothingHarvestedYetRepository(self):
         self.assertFalse(os.path.isfile(self.idfilename))
-        self.assertFalse(os.path.isfile(self.ignoreidfilename))
+        self.assertFalse(os.path.isfile(self.invalidIdsFilename))
         self.assertFalse(os.path.isfile(self.old_idfilename))
         self.assertFalse(os.path.isfile(self.statsfilename))
 
@@ -87,10 +88,10 @@
 
         self.assertTrue(os.path.isfile(self.old_idfilename))
         self.assertTrue(os.path.isfile(self.idfilename))
-        self.assertTrue(os.path.isfile(self.ignoreidfilename))
+        self.assertTrue(os.path.isfile(self.invalidIdsFilename))
         self.assertEquals('', readfile(self.old_idfilename))
         self.assertEquals('', readfile(self.idfilename))
-        self.assertEquals('', readfile(self.ignoreidfilename))
+        self.assertEquals('', readfile(self.invalidIdsFilename))
         self.assertTrue('Done: Deleted all id\'s' in  readfile(self.statsfilename))
         self.assertEquals('Smooth reharvest: initialized.', message)
         self.assertFalse(done)

Changeset created on Wed Aug 15 09:56:59 UTC 2012 by Seecr (Seek You Too B.V.)

Description: rss feed on harvest state changes for repositories within a domain

    For the efficient monitoring of the harvest state of all repositories in a 
    domain, a new rss feed (running.rss) is introduced that will only get a new 
    item when the resulting state of a single harvest iteration differs from 
    before (Ok -> Error, Error -> Ok or a new error message).

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-harvester/workingsets/8.1.4.1-Edurep/version_1

diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_1/meresco/harvester/controlpanel/html/dynamic/running.rss.sf /home/edurep/development/meresco-harvester/workingsets/8.1.4.1-Edurep/version_2/meresco/harvester/controlpanel/html/dynamic/running.rss.sf
--- version_1/meresco/harvester/controlpanel/html/dynamic/running.rss.sf	1970-01-01 01:00:00.000000000 +0100
+++ version_2/meresco/harvester/controlpanel/html/dynamic/running.rss.sf	2012-08-15 11:56:42.000000000 +0200
@@ -0,0 +1,72 @@
+## begin license ##
+# 
+# "Meresco Harvester" consists of two subsystems, namely an OAI-harvester and
+# a web-control panel.
+# "Meresco Harvester" is originally called "Sahara" and was developed for 
+# SURFnet by:
+# Seek You Too B.V. (CQ2) http://www.cq2.nl 
+# 
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Kennisnet http://www.kennisnet.nl
+# 
+# This file is part of "Meresco Harvester"
+# 
+# "Meresco Harvester" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Harvester" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Harvester"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
+## end license ##
+
+def toZuluTime(timestamp):
+    timestamp = timestamp.replace(' ', 'T')
+    if not timestamp.endswith('Z'):
+        timestamp = timestamp + 'Z'
+    return timestamp
+
+def main(path, arguments, **kwargs):
+    domainId = arguments.get('domainId', [None])[0]
+
+    linkToStatusPage = "%s?%s" % (config["harvesterStatusURL"], urlencode(dict(domainId=domainId)))
+
+    yield "HTTP/1.0 200 OK\r\n"
+    yield "Content-Type: application/rss+xml\r\n"
+    yield "\r\n"
+    yield '<?xml version="1.0" encoding="UTF-8"?>\r\n'
+    yield """<rss version="2.0"><channel>"""
+    yield "<title>Harvest status changes for domain '%s'</title>" % domainId
+    yield "<description>Status changes per repository for domain '%s'</description>" % domainId
+    yield '<link>%s</link>' % escapeXml(linkToStatusPage)
+    yield '<ttl>360</ttl>'
+
+    for runningState in observable.call.getRunningStatesForDomain(domainId):
+        runningState['changedate'] = toZuluTime(runningState['changedate'])
+        description = 'Harvest time: ' + runningState['changedate']
+        if runningState.get('message', ''):
+            description += '<br/>' + runningState['message']
+        yield RSS_TEMPLATE % {
+            'title': '%(repositoryId)s: %(status)s' % runningState,
+            'description': escapeXml(description),
+            'link': escapeXml(linkToStatusPage + '&' + urlencode(dict(repositoryId=runningState['repositoryId']))),
+            'guid': '%(repositoryId)s:%(changedate)s' % runningState,
+        }
+
+    yield "</channel>"
+    yield "</rss>"
+
+RSS_TEMPLATE = """<item>
+    <title>%(title)s</title>
+    <description>%(description)s</description>
+    <link>%(link)s</link>
+    <guid>%(guid)s</guid>
+</item>\n"""
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_1/meresco/harvester/controlpanel/slowfoottemplates/running.rss /home/edurep/development/meresco-harvester/workingsets/8.1.4.1-Edurep/version_2/meresco/harvester/controlpanel/slowfoottemplates/running.rss
--- version_1/meresco/harvester/controlpanel/slowfoottemplates/running.rss	1970-01-01 01:00:00.000000000 +0100
+++ version_2/meresco/harvester/controlpanel/slowfoottemplates/running.rss	2012-08-15 11:56:42.000000000 +0200
@@ -0,0 +1,5 @@
+<%
+type("application/rss+xml")
+include(req.get_options()['internalServer'] + '/running.rss?' + urlencode(args))
+%>
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_1/meresco/harvester/controlpanel/slowfoottemplates/showHarvesterStatus /home/edurep/development/meresco-harvester/workingsets/8.1.4.1-Edurep/version_2/meresco/harvester/controlpanel/slowfoottemplates/showHarvesterStatus
--- version_1/meresco/harvester/controlpanel/slowfoottemplates/showHarvesterStatus	2012-08-14 11:22:53.000000000 +0200
+++ version_2/meresco/harvester/controlpanel/slowfoottemplates/showHarvesterStatus	2012-08-15 11:56:42.000000000 +0200
@@ -1,6 +1,3 @@
-<p>
-<h3>Harvester Status.</h3>
-</p>
 <%
 domainId = args.domainId
 originalArgs = dict(domainId=domainId, repositoryGroupId=args.repositoryGroupId, repositoryId=args.repositoryId)
@@ -16,6 +13,18 @@
     invalid[status.repositoryId] = status
 #
 %>
+<p class="head">Harvester Status</p>
+<p>Domain: <%=domainId%> <a href="/running.rss?<%= urlencode(dict(domainId=domainId)) %>"><img src="/images/rss.png"/></a></p>
+<%
+if originalArgs['repositoryGroupId']:
+    %><p>RepositoryGroup: <%=originalArgs['repositoryGroupId']%></p><%
+#
+%>
+<%
+if originalArgs['repositoryId']:
+    %><p>Repository: <%=originalArgs['repositoryId']%></p><%
+#
+%>
 <table class="event">
 <tr class="eventheader">
 <td>RepositoryGroup</td>
@@ -70,9 +79,7 @@
 </table>
 <br/>
 
-<p>
-<h3>Harvester Errors.</h3>
-</p>
+<p class="head">Harvester Errors</p>
 <table class="event">
 <%
 for status in statuses:
@@ -106,9 +113,7 @@
 %>
 </table>
 
-<p>
-<h3>Validatie Errors.</h3>
-</p>
+<p class="head">Validatie Errors</p>
 <table class="event">
 <%
 for status in statuses:
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_1/meresco/harvester/repositorystatus.py /home/edurep/development/meresco-harvester/workingsets/8.1.4.1-Edurep/version_2/meresco/harvester/repositorystatus.py
--- version_1/meresco/harvester/repositorystatus.py	2012-08-14 11:22:53.000000000 +0200
+++ version_2/meresco/harvester/repositorystatus.py	2012-08-15 11:56:42.000000000 +0200
@@ -6,9 +6,9 @@
 # SURFnet by:
 # Seek You Too B.V. (CQ2) http://www.cq2.nl 
 # 
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
-# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2011-2012 Stichting Kennisnet http://www.kennisnet.nl
 # 
 # This file is part of "Meresco Harvester"
 # 
@@ -36,6 +36,7 @@
 from itertools import ifilter, islice
 from meresco.core import Observable
 from escaping import escapeFilename, unescapeFilename
+from simplejson import load as jsonLoad
 
 from harvesterlog import INVALID_DATA_MESSAGES_DIR
 from meresco.harvester.deleteids import readIds
@@ -62,6 +63,15 @@
                     yield self._getRepositoryStatus(domainId, groupId, repoId)
         yield "</GetStatus>"
 
+    def getRunningStatesForDomain(self, domainId):
+        return sorted([
+            mergeDicts(jsonLoad(open(filepath)), {'repositoryId': repoId})
+            for groupId in self.call.getRepositoryGroupIds(domainId=domainId)
+            for repoId in self.call.getRepositoryIds(domainId=domainId, repositoryGroupId=groupId)
+            for filepath in [join(self._statePath, domainId, escapeFilename("%s.running" % repoId))]
+            if isfile(filepath)
+        ], key=lambda d: d['changedate'], reverse=True)
+
     def invalidRecords(self, domainId, repositoryId):
         invalidFile = join(self._statePath, domainId, escapeFilename("%s_invalid.ids" % repositoryId))
         if not isfile(invalidFile):
@@ -139,3 +149,7 @@
 def _reformatDate(aDate):
     return aDate[0:len('YYYY-MM-DD')] + 'T' + aDate[len('YYYY-MM-DD '):len('YYYY-MM-DD HH:MM:SS')] + 'Z'
         
+def mergeDicts(dict1, dict2):
+    newDict = dict1.copy()
+    newDict.update(dict2)
+    return newDict
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_1/meresco/harvester/state.py /home/edurep/development/meresco-harvester/workingsets/8.1.4.1-Edurep/version_2/meresco/harvester/state.py
--- version_1/meresco/harvester/state.py	2012-08-14 11:22:53.000000000 +0200
+++ version_2/meresco/harvester/state.py	2012-08-15 11:56:42.000000000 +0200
@@ -41,6 +41,7 @@
         self._statsfilename = join(stateDir, '%s.stats' % name)
         self._forceFinalNewlineOnStatsFile()
         self._resumptionFilename = join(stateDir, '%s.next' % name)
+        self._runningFilename = join(stateDir, '%s.running' % name)
         self.from_ = None
         self.token = None
         self._readState()
@@ -57,15 +58,23 @@
         self._write(countsSummary)
         self._write(', Done: %s, ResumptionToken: %s' % (self.getTime(), token))
         self._writeResumptionValues(token, responseDate)
+        self._markRunningState("Ok")
 
     def markDeleted(self):
         self._write("Started: %s, Harvested/Uploaded/Deleted/Total: 0/0/0/0, Done: Deleted all ids." % self.getTime())
         self._writeResumptionValues(None, None)
+        self._markRunningState("Ok")
 
     def markException(self, exType, exValue, countsSummary):
         error = str(exType) + ': ' + str(exValue)
         self._write(countsSummary)
         self._write( ', Error: ' + error)
+        self._markRunningState("Error", str(exValue))
+
+    def _markRunningState(self, status, message=""):
+        runningDict = jsonLoad(open(self._runningFilename)) if isfile(self._runningFilename) else {}
+        if status != runningDict.get('status', None) or message != runningDict.get('message', None):
+            jsonDump({'changedate': self.getTime(),'status': status, 'message': message}, open(self._runningFilename, 'w'))
 
     def getTime(self):
         return strftime('%Y-%m-%d %H:%M:%S', self._gmtime())
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_1/test/integration/internalservertest.py /home/edurep/development/meresco-harvester/workingsets/8.1.4.1-Edurep/version_2/test/integration/internalservertest.py
--- version_1/test/integration/internalservertest.py	2012-08-14 11:22:53.000000000 +0200
+++ version_2/test/integration/internalservertest.py	2012-08-15 11:56:42.000000000 +0200
@@ -30,9 +30,11 @@
 ## end license ##
 
 from os import system
-from utils import getRequest
 from lxml.etree import tostring
+from time import gmtime, strftime
+
 from integrationtestcase import IntegrationTestCase
+from utils import getRequest
 from meresco.harvester.namespaces import xpath
 
 REPOSITORY = 'integrationtest'
@@ -132,3 +134,35 @@
         self.assertEquals("Harvester status voor repository2", xpath(result, "/rss/channel/title/text()")[0])
         self.assertEquals(0, len(xpath(result, "/rss/channel/item")))
 
+    def testRssForStatusChangesOk(self):
+        self.startHarvester(repository=REPOSITORY)
+        header, result = getRequest(self.harvesterInternalServerPortNumber, '/running.rss', {'domainId': 'adomain'}, parse='lxml')
+        self.assertEquals("Harvest status changes for domain 'adomain'", xpath(result, "/rss/channel/title/text()")[0])
+        self.assertEquals("Recente status changes per repository voor domein 'adomain'", xpath(result, "/rss/channel/description/text()")[0])
+        self.assertEquals("http://localhost:9999/harvesterStatus.page?domainId=adomain", xpath(result, "/rss/channel/link/text()")[0])
+        self.assertEquals(str(60 * 6), xpath(result, "/rss/channel/ttl/text()")[0])
+        TODAY = strftime("%Y-%m-%d", gmtime())
+        items = xpath(result, "/rss/channel/item")
+        self.assertEquals(1, len(items))
+        self.assertEquals("integrationtest: Ok", ''.join(xpath(items[0], "title/text()")))
+        description = ''.join(xpath(items[0], "description/text()"))
+        self.assertTrue(description.startswith("Harvest time: %s" % TODAY), description)
+        self.assertEquals('integrationtest:%s' % TODAY, ''.join(xpath(items[0], "guid/text()")).split(' ')[0])
+        self.assertEquals("http://localhost:9999/harvesterStatus.page?domainId=adomain&repositoryId=integrationtest", xpath(items[0], "link/text()")[0])
+
+    def testRssForStatusChangesError(self):
+        self.controlHelper(action="raiseExceptionOnIds", id=['%s:oai:record:01' % REPOSITORY] )
+        self.startHarvester(repository=REPOSITORY)
+        header, result = getRequest(self.harvesterInternalServerPortNumber, '/running.rss', {'domainId': 'adomain'}, parse='lxml')
+        TODAY = strftime("%Y-%m-%d", gmtime())
+        items = xpath(result, "/rss/channel/item")
+        self.assertEquals(1, len(items))
+        self.assertEquals("integrationtest: Error", ''.join(xpath(items[0], "title/text()")))
+        description = ''.join(xpath(items[0], "description/text()"))
+        self.assertTrue(description.startswith("Harvest time: %s" % TODAY), description)
+        self.assertTrue("Exception: ERROR" in description, description)
+        self.assertEquals('integrationtest:%s' % TODAY, ''.join(xpath(items[0], "guid/text()")).split('T')[0])
+        self.assertEquals("http://localhost:9999/harvesterStatus.page?domainId=adomain&repositoryId=integrationtest", xpath(items[0], "link/text()")[0])
+
+
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_1/test/repositorystatustest.py /home/edurep/development/meresco-harvester/workingsets/8.1.4.1-Edurep/version_2/test/repositorystatustest.py
--- version_1/test/repositorystatustest.py	2012-08-14 11:22:53.000000000 +0200
+++ version_2/test/repositorystatustest.py	2012-08-15 11:56:42.000000000 +0200
@@ -6,9 +6,9 @@
 # SURFnet by:
 # Seek You Too B.V. (CQ2) http://www.cq2.nl 
 # 
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
-# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2011-2012 Stichting Kennisnet http://www.kennisnet.nl
 # 
 # This file is part of "Meresco Harvester"
 # 
@@ -34,6 +34,7 @@
 
 from lxml.etree import tostring, parse
 from StringIO import StringIO
+from simplejson import dump as jsonDump
 
 from seecr.test import SeecrTestCase, CallTrace
 
@@ -72,6 +73,28 @@
         observer.methods["getRepositoryGroupId"] = getRepositoryGroupId
         self.status.addObserver(observer)
 
+    def testGetRunningStatesForDomain(self):
+        jsonDump(
+                {'changedate': "2012-08-14 12:00:00",'status': "Ok", 'message': ""},
+                open(join(self.stateDir, self.domainId, "repoId1.running"), 'w')
+        )
+        jsonDump(
+                {'changedate': "2012-08-13 12:00:00",'status': "Error", 'message': "an error message"},
+                open(join(self.stateDir, self.domainId, "repoId3.running"), 'w')
+        )
+        jsonDump(
+                {'changedate': "2012-08-16 12:00:00",'status': "Ok", 'message': ""},
+                open(join(self.stateDir, self.domainId, "anotherRepoId.running"), 'w')
+        )
+
+        expected = [
+            {'repositoryId': 'anotherRepoId', 'changedate': "2012-08-16 12:00:00",'status': "Ok", 'message': ""},
+            {'repositoryId': 'repoId1', 'changedate': "2012-08-14 12:00:00",'status': "Ok", 'message': ""},
+            {'repositoryId': 'repoId3', 'changedate': "2012-08-13 12:00:00",'status': "Error", 'message': "an error message"},
+        ]
+        self.assertEquals(expected, self.status.getRunningStatesForDomain(self.domainId))
+        
+
     def testGetStatusForRepoIdAndDomainId(self):
         self.assertEqualsWS("""<GetStatus>
             <status repositoryId="repoId1" repositoryGroupId="repoGroupId1">
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_1/test/statetest.py /home/edurep/development/meresco-harvester/workingsets/8.1.4.1-Edurep/version_2/test/statetest.py
--- version_1/test/statetest.py	2012-08-14 11:22:53.000000000 +0200
+++ version_2/test/statetest.py	2012-08-15 11:56:42.000000000 +0200
@@ -34,6 +34,7 @@
 
 from os.path import join
 from sys import exc_info
+from simplejson import load as jsonLoad
 
 from meresco.harvester.state import State, getResumptionToken, getStartDate
 from seecr.test import SeecrTestCase
@@ -147,6 +148,7 @@
 
         self.assertEquals('Started: 2012-08-13 12:15:00, Harvested/Uploaded/Deleted/Total: 9999/9999/9999/9999, Done: 2012-08-13 12:15:00, ResumptionToken: resumptionToken\n', open(join(self.tempdir, 'repo.stats')).read())
         self.assertEquals('{"from": "2012-08-13T12:14:00", "resumptionToken": "resumptionToken"}', open(join(self.tempdir, 'repo.next')).read())
+        self.assertEquals({"changedate": "2012-08-13 12:15:00", "status": "Ok", "message": ""}, jsonLoad(open(join(self.tempdir, 'repo.running'))))
                 
         state = State(self.tempdir, 'repo')
         state._gmtime = lambda: (2012, 8, 13, 12, 17, 0, 0, 0, 0)
@@ -158,6 +160,7 @@
 Started: 2012-08-13 12:17:00, Harvested/Uploaded/Deleted/Total: 9999/9999/9999/9999, Done: 2012-08-13 12:17:00, ResumptionToken: newToken
 """, open(join(self.tempdir, 'repo.stats')).read())
         self.assertEquals('{"from": "2012-08-13", "resumptionToken": "newToken"}', open(join(self.tempdir, 'repo.next')).read())
+        self.assertEquals({"changedate": "2012-08-13 12:15:00", "status": "Ok", "message": ""}, jsonLoad(open(join(self.tempdir, 'repo.running'))))
 
     def testMarkDeleted(self):
         state = State(self.tempdir, 'repo')
@@ -168,6 +171,8 @@
 
         self.assertEquals('Started: 2012-08-13 12:15:00, Harvested/Uploaded/Deleted/Total: 9999/9999/9999/9999, Done: 2012-08-13 12:15:00, ResumptionToken: resumptionToken\n', open(join(self.tempdir, 'repo.stats')).read())
         self.assertEquals('{"from": "2012-08-13T12:14:00", "resumptionToken": "resumptionToken"}', open(join(self.tempdir, 'repo.next')).read())
+
+        self.assertEquals({"changedate": "2012-08-13 12:15:00", "status": "Ok", "message": ""}, jsonLoad(open(join(self.tempdir, 'repo.running'))))
                 
         state = State(self.tempdir, 'repo')
         state._gmtime = lambda: (2012, 8, 13, 12, 17, 0, 0, 0, 0)
@@ -178,6 +183,7 @@
 Started: 2012-08-13 12:17:00, Harvested/Uploaded/Deleted/Total: 0/0/0/0, Done: Deleted all ids.
 """, open(join(self.tempdir, 'repo.stats')).read())
         self.assertEquals('{"from": "", "resumptionToken": ""}', open(join(self.tempdir, 'repo.next')).read())
+        self.assertEquals({"changedate": "2012-08-13 12:15:00", "status": "Ok", "message": ""}, jsonLoad(open(join(self.tempdir, 'repo.running'))))
 
     def testSetToLastCleanState(self):
         state = State(self.tempdir, 'repo')
@@ -205,14 +211,96 @@
         state = State(self.tempdir, 'repo')
         state._gmtime = lambda: (2012, 8, 13, 12, 15, 0, 0, 0, 0)
         state.markStarted()
+        state.markHarvested("9999/9999/9999/9999", "resumptionToken", "2012-08-13T12:14:00")
+        state.close()
+
+        self.assertEquals('Started: 2012-08-13 12:15:00, Harvested/Uploaded/Deleted/Total: 9999/9999/9999/9999, Done: 2012-08-13 12:15:00, ResumptionToken: resumptionToken\n', open(join(self.tempdir, 'repo.stats')).read())
+        self.assertEquals('{"from": "2012-08-13T12:14:00", "resumptionToken": "resumptionToken"}', open(join(self.tempdir, 'repo.next')).read())
+        self.assertEquals({"changedate": "2012-08-13 12:15:00", "status": "Ok", "message": ""}, jsonLoad(open(join(self.tempdir, 'repo.running'))))
+
+        state = State(self.tempdir, 'repo')
+        state._gmtime = lambda: (2012, 8, 13, 12, 17, 0, 0, 0, 0)
+        state.markStarted()
         try:
             raise ValueError("whatever")
         except:
             exType, exValue, exTraceback = exc_info()
             state.markException(exType, exValue, "9999/9999/9999/9999")
         state.close()
-        self.assertEquals("""Started: 2012-08-13 12:15:00, Harvested/Uploaded/Deleted/Total: 9999/9999/9999/9999, Error: <type 'exceptions.ValueError'>: whatever
+        self.assertEquals("""Started: 2012-08-13 12:15:00, Harvested/Uploaded/Deleted/Total: 9999/9999/9999/9999, Done: 2012-08-13 12:15:00, ResumptionToken: resumptionToken
+Started: 2012-08-13 12:17:00, Harvested/Uploaded/Deleted/Total: 9999/9999/9999/9999, Error: <type 'exceptions.ValueError'>: whatever
 """, open(join(self.tempdir, 'repo.stats')).read())
+        self.assertEquals({"changedate": "2012-08-13 12:17:00", "status": "Error", "message": "whatever"}, jsonLoad(open(join(self.tempdir, 'repo.running'))))
+
+    def testMarkHarvesterAfterExceptionChange(self):
+        state = State(self.tempdir, 'repo')
+        state._gmtime = lambda: (2012, 8, 13, 12, 15, 0, 0, 0, 0)
+        state.markStarted()
+        try:
+            raise ValueError("whatever")
+        except:
+            exType, exValue, exTraceback = exc_info()
+            state.markException(exType, exValue, "9999/9999/9999/9999")
+        state.close()
+        self.assertEquals({"changedate": "2012-08-13 12:15:00", "status": "Error", "message": "whatever"}, jsonLoad(open(join(self.tempdir, 'repo.running'))))
 
+        state = State(self.tempdir, 'repo')
+        state._gmtime = lambda: (2012, 8, 13, 12, 17, 0, 0, 0, 0)
+        state.markStarted()
+        state.markHarvested("9999/9999/9999/9999", "resumptionToken", "2012-08-13T12:14:00")
+        state.close()
+        self.assertEquals({"changedate": "2012-08-13 12:17:00", "status": "Ok", "message": ""}, jsonLoad(open(join(self.tempdir, 'repo.running'))))
 
+    def testMarkDeletedAfterExceptionChange(self):
+        state = State(self.tempdir, 'repo')
+        state._gmtime = lambda: (2012, 8, 13, 12, 15, 0, 0, 0, 0)
+        state.markStarted()
+        try:
+            raise ValueError("whatever")
+        except:
+            exType, exValue, exTraceback = exc_info()
+            state.markException(exType, exValue, "9999/9999/9999/9999")
+        state.close()
+        self.assertEquals({"changedate": "2012-08-13 12:15:00", "status": "Error", "message": "whatever"}, jsonLoad(open(join(self.tempdir, 'repo.running'))))
+
+        state = State(self.tempdir, 'repo')
+        state._gmtime = lambda: (2012, 8, 13, 12, 17, 0, 0, 0, 0)
+        state.markStarted()
+        state.markDeleted()
+        state.close()
+        self.assertEquals({"changedate": "2012-08-13 12:17:00", "status": "Ok", "message": ""}, jsonLoad(open(join(self.tempdir, 'repo.running'))))
+
+    def testMarkExceptionChange(self):
+        state = State(self.tempdir, 'repo')
+        state._gmtime = lambda: (2012, 8, 13, 12, 15, 0, 0, 0, 0)
+        state.markStarted()
+        try:
+            raise ValueError("the same exception")
+        except:
+            exType, exValue, exTraceback = exc_info()
+            state.markException(exType, exValue, "9999/9999/9999/9999")
+        state.close()
+        self.assertEquals({"changedate": "2012-08-13 12:15:00", "status": "Error", "message": "the same exception"}, jsonLoad(open(join(self.tempdir, 'repo.running'))))
+
+        state = State(self.tempdir, 'repo')
+        state._gmtime = lambda: (2012, 8, 13, 12, 17, 0, 0, 0, 0)
+        state.markStarted()
+        try:
+            raise ValueError("the same exception")
+        except:
+            exType, exValue, exTraceback = exc_info()
+            state.markException(exType, exValue, "9999/9999/9999/9999")
+        state.close()
+        self.assertEquals({"changedate": "2012-08-13 12:15:00", "status": "Error", "message": "the same exception"}, jsonLoad(open(join(self.tempdir, 'repo.running'))))
+
+        state = State(self.tempdir, 'repo')
+        state._gmtime = lambda: (2012, 8, 13, 12, 19, 0, 0, 0, 0)
+        state.markStarted()
+        try:
+            raise ValueError("the other exception")
+        except:
+            exType, exValue, exTraceback = exc_info()
+            state.markException(exType, exValue, "9999/9999/9999/9999")
+        state.close()
+        self.assertEquals({"changedate": "2012-08-13 12:19:00", "status": "Error", "message": "the other exception"}, jsonLoad(open(join(self.tempdir, 'repo.running'))))
 

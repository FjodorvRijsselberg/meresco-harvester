Changeset created on Fri Nov 25 15:50:24 UTC 2011 by Seecr (Seek You Too B.V.)

Description: Repository baseurls can now contain query parameters.

    Even though not exactly according to the OAI-PMH specification, we need to be able to
    harvest repositories that require a fixed query parameter in all requests.
    This need arose when the Rijksmuseum required OAI-PMH requests to also include 
    an 'apikey' query parameter.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-harvester/workingsets/7.3-Natag/version_0

diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/harvester/oairequest.py version_1/meresco/harvester/oairequest.py
--- version_0/meresco/harvester/oairequest.py	2011-11-25 14:23:15.000000000 +0100
+++ version_1/meresco/harvester/oairequest.py	2011-11-25 16:50:14.000000000 +0100
@@ -32,16 +32,21 @@
 # 
 ## end license ##
 
-from slowfoot import binderytools
-from urllib import urlencode, urlopen
 import os
+from urllib import urlencode, urlopen
+from urlparse import urlparse, urlunparse
+from cgi import parse_qsl 
+
+from slowfoot import binderytools
 from slowfoot.wrappers import wrapp
 
+
 class OaiRequestException(Exception):
     def __init__(self, url, message):
         Exception.__init__(self, 'occurred with repository at "%s", message: "%s"' % (url, message))
         self.url = url
 
+
 class OAIError(OaiRequestException):
     def __init__(self, url, message, response):
         OaiRequestException.__init__(self, url, message)
@@ -53,10 +58,15 @@
         return str(self._error())
     def errorCode(self):
         return getattr(self._error(), 'code', '')
-    
+
+
+QUERY_POSITION_WITHIN_URLPARSE_RESULT=4
+
 class OaiRequest(object):
     def __init__(self, url):
         self._url = url
+        self._urlElements = urlparse(url)
+        self._argslist = parse_qsl(self._urlElements[QUERY_POSITION_WITHIN_URLPARSE_RESULT])
 
     def listRecords(self, **kwargs):
         if kwargs.has_key('from_'):
@@ -83,19 +93,28 @@
     
     def request(self, args):
         try:
-            argslist = filter(lambda (k,v):v,args.items())
+            argslist = [(k,v) for k,v in args.items() if v]
             result = self._request(argslist)
-            result.OAI_PMH #Make sure the xml is a OAI_PMH request
+            result.OAI_PMH  # Make sure the xml is a OAI_PMH request
         except Exception, e:
-            raise OaiRequestException(self._url + '?' + urlencode(argslist), message=repr(e))
+            raise OaiRequestException(self._buildRequestUrl(argslist), message=repr(e))
         if hasattr(result.OAI_PMH, 'error'):
-            raise OAIError(self._url + '?' + urlencode(argslist), str(result.OAI_PMH.error), result)
+            raise OAIError(self._buildRequestUrl(argslist), str(result.OAI_PMH.error), result)
         return result
     
     def _request(self, argslist):
-        requesturl = self._url + '?' + urlencode(argslist)
-        return binderytools.bind_uri(requesturl)
+        return binderytools.bind_uri(self._buildRequestUrl(argslist))
     
+    def _buildRequestUrl(self, argslist):
+        """Builds the url from the repository's base url + query parameters.
+            Special case (not actually allowed by OAI-PMH specification): if query parameters 
+            occur in the baseurl, they are kept. Origin: Rijksmuseum OAI-PMH repository insists 
+            on 'apikey' query parameter to go with ListRecords."""
+        urlElements = list(self._urlElements)
+        urlElements[QUERY_POSITION_WITHIN_URLPARSE_RESULT] = urlencode(self._argslist + argslist)
+        return urlunparse(urlElements)
+
+
 class LoggingOaiRequest(OaiRequest):
     def __init__(self, url, tempdir):
         OaiRequest.__init__(self, url)
@@ -113,7 +132,7 @@
             f.close()
         
     def _request(self, argslist):
-        requesturl = binderytools.Uri.MakeUrllibSafe(self._url + '?' + urlencode(argslist))
+        requesturl = binderytools.Uri.MakeUrllibSafe(self._buildRequestUrl(argslist))
         filename = os.path.join(self.tempdir, 'oairequest.' + self.getNumber() + '.xml')
         opened = urlopen(requesturl)
         writefile = file(filename, 'w')
@@ -124,9 +143,10 @@
             opened.close()
             writefile.close()
         return binderytools.bind_file(filename)
-    
+
+
 def loggingListRecords(url, tempdir, **kwargs):
-    """loggingListRecords(url, tempdir, **listRecordsArgs"""
+    """loggingListRecords(url, tempdir, **listRecordsArgs)"""
     loair = LoggingOaiRequest(url, tempdir)
     listRecords = loair.listRecords(**kwargs)
     resumptionToken = str(listRecords.parentNode.resumptionToken)
@@ -135,5 +155,4 @@
         listRecords = loair.listRecords(resumptionToken=resumptionToken)
         resumptionToken = str(listRecords.parentNode.resumptionToken)
         print resumptionToken
-    
-        
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/oairequesttest.py version_1/test/oairequesttest.py
--- version_0/test/oairequesttest.py	2011-11-25 14:23:15.000000000 +0100
+++ version_1/test/oairequesttest.py	2011-11-25 16:50:14.000000000 +0100
@@ -38,18 +38,18 @@
 from meresco.harvester.oairequest import OaiRequest, OAIError
 from mockoairequest import MockOaiRequest
 
+
 class OaiRequestTest(unittest.TestCase):
     def setUp(self):
         self.request = MockOaiRequest('mocktud')
         
-        
     def testMockOaiRequest(self):
-        binding = self.request.request({'verb':'ListRecords','metadataPrefix':'oai_dc'})
-        self.assertEquals('2004-12-29T13:19:27Z',str(binding.OAI_PMH.responseDate))
+        binding = self.request.request({'verb': 'ListRecords', 'metadataPrefix': 'oai_dc'})
+        self.assertEquals('2004-12-29T13:19:27Z', str(binding.OAI_PMH.responseDate))
         
     def testOtherOaiRequest(self):
-        binding = self.request.request({'verb':'GetRecord','metadataPrefix':'oai_dc', 'identifier':'oai:rep:12345'})
-        self.assertEquals('2005-04-28T12:16:27Z',str(binding.OAI_PMH.responseDate))
+        binding = self.request.request({'verb': 'GetRecord', 'metadataPrefix': 'oai_dc', 'identifier': 'oai:rep:12345'})
+        self.assertEquals('2005-04-28T12:16:27Z', str(binding.OAI_PMH.responseDate))
         
     def testListRecordsError(self):
         try:
@@ -57,13 +57,13 @@
             self.fail()
         except OAIError, e:
             self.assertEquals('The value of the resumptionToken argument is invalid or expired.',e.errorMessage())
-            self.assertEquals( u'badResumptionToken',e.errorCode())
+            self.assertEquals(u'badResumptionToken', e.errorCode())
             
     def testListRecords(self):
         records, resumptionToken = self.request.listRecords(metadataPrefix='oai_dc')
         self.assertEquals("TestToken", resumptionToken)
-        self.assertEquals(3,len(records))
-        self.assertEquals('oai:tudelft.nl:007087',str(records[0].header.identifier))
+        self.assertEquals(3, len(records))
+        self.assertEquals('oai:tudelft.nl:007087', str(records[0].header.identifier))
         if records[0].header.deleted:
             self.fail()
         
@@ -78,13 +78,13 @@
     def testListRecordArgs(self):
         self.request.request = self.mockRequest
         self.request.listRecords(metadataPrefix='kaas')
-        self.assertEquals('kaas',self.mockRequest_args['metadataPrefix'])
+        self.assertEquals('kaas', self.mockRequest_args['metadataPrefix'])
         self.assert_(not self.mockRequest_args.has_key('resumptionToken'))
-        self.request.listRecords(from_='from',until='until',set='set',metadataPrefix='prefix')
-        self.assertEquals('from',self.mockRequest_args['from'])
-        self.assertEquals('until',self.mockRequest_args['until'])
-        self.assertEquals('set',self.mockRequest_args['set'])
-        self.assertEquals('prefix',self.mockRequest_args['metadataPrefix'])
+        self.request.listRecords(from_='from', until='until',set='set', metadataPrefix='prefix')
+        self.assertEquals('from', self.mockRequest_args['from'])
+        self.assertEquals('until', self.mockRequest_args['until'])
+        self.assertEquals('set', self.mockRequest_args['set'])
+        self.assertEquals('prefix', self.mockRequest_args['metadataPrefix'])
         
     def testGetRecord(self):
         record = self.request.getRecord(identifier='oai:rep:12345', metadataPrefix='oai_dc')
@@ -92,12 +92,19 @@
         
     def testListRecordsWithAnEmptyList(self):
         records, resumptionToken = self.request.listRecords(resumptionToken='EmptyListToken')
-        self.assertEquals(0,len(records))
+        self.assertEquals(0, len(records))
         self.assertEquals("", resumptionToken)
+
+    def testBuildRequestUrl(self):
+        oaiRequest = OaiRequest("http://x.y.z/oai")
+        self.assertEquals("http://x.y.z/oai?verb=ListRecords&metadataPrefix=oai_dc", oaiRequest._buildRequestUrl([('verb', 'ListRecords'), ('metadataPrefix', 'oai_dc')]))
+
+        oaiRequest = OaiRequest("http://x.y.z/oai?apikey=xyz123")
+        self.assertEquals("http://x.y.z/oai?apikey=xyz123&verb=ListRecords&metadataPrefix=oai_dc", oaiRequest._buildRequestUrl([('verb', 'ListRecords'), ('metadataPrefix', 'oai_dc')]))
+
         
     def xtest_LIVE_Retrieve(self):
         request = OaiRequest('http://library.wur.nl/oai')
-        amarabinding = request.request({'verb':'ListRecords','metadataPrefix':'oai_dc'})
+        amarabinding = request.request({'verb': 'ListRecords', 'metadataPrefix': 'oai_dc'})
         amarabinding.OAI_PMH
-                    
-
+ 

Changeset created on Tue Jan 17 10:41:19 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Escaping of repository and record id for invalid records

    The filename of invalid records contains the repositoryId and recordId. 
    These are escaped by saving and now also by reading.

    Added some extra html escaping where needed.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-harvester/workingsets/7.3.1-Edurep/version_0

diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/meresco/harvester/controlpanel/html/dynamic/invalidRecord.sf /vol/extra_disk/development/meresco-harvester/workingsets/7.3.1-Edurep/version_1/meresco/harvester/controlpanel/html/dynamic/invalidRecord.sf
--- version_0/meresco/harvester/controlpanel/html/dynamic/invalidRecord.sf	2012-01-17 10:10:11.000000000 +0100
+++ version_1/meresco/harvester/controlpanel/html/dynamic/invalidRecord.sf	2012-01-17 11:41:00.000000000 +0100
@@ -34,7 +34,7 @@
     recordId = arguments.get('recordId', [None])[0]
 
     yield """<div>
-    <h3>Repository %s - Record %s</h3>""" % (repositoryId, recordId)
+    <h3>Repository %s - Record %s</h3>""" % (escapeHtml(repositoryId), escapeHtml(recordId))
 
     invalidRecord = any.getInvalidRecord(domainId, repositoryId, recordId)
 
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/meresco/harvester/controlpanel/html/dynamic/invalid.sf /vol/extra_disk/development/meresco-harvester/workingsets/7.3.1-Edurep/version_1/meresco/harvester/controlpanel/html/dynamic/invalid.sf
--- version_0/meresco/harvester/controlpanel/html/dynamic/invalid.sf	2012-01-17 10:10:11.000000000 +0100
+++ version_1/meresco/harvester/controlpanel/html/dynamic/invalid.sf	2012-01-17 11:41:00.000000000 +0100
@@ -43,7 +43,7 @@
         recordId = id.split(":", 1)[-1]
         args = {'recordId': recordId}
         args.update(orginalArgs)
-        yield '<tr><td class="link"><a href="/page/invalidRecord/?%s">%s</a></td></tr>' % (escapeHtml(urlencode(args)), recordId)
+        yield '<tr><td class="link"><a href="/page/invalidRecord/?%s">%s</a></td></tr>' % (escapeHtml(urlencode(args)), escapeHtml(recordId))
     yield """</table>
     <p><a href="/page/showHarvesterStatus/show?%s">Back to harvester status of this repository</a></p>
     </div>""" % (escapeHtml(urlencode(orginalArgs)))
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/meresco/harvester/harvesterlog.py /vol/extra_disk/development/meresco-harvester/workingsets/7.3.1-Edurep/version_1/meresco/harvester/harvesterlog.py
--- version_0/meresco/harvester/harvesterlog.py	2012-01-17 10:10:11.000000000 +0100
+++ version_1/meresco/harvester/harvesterlog.py	2012-01-17 11:41:00.000000000 +0100
@@ -162,6 +162,6 @@
 
     def _invalidDataMessageFilePath(self, uploadid):
         repositoryId, recordId = uploadid.split(":", 1)
-        return join(self._logDir, INVALID_DATA_MESSAGES_DIR, repositoryId, escapeFilename(recordId))
+        return join(self._logDir, INVALID_DATA_MESSAGES_DIR, escapeFilename(repositoryId), escapeFilename(recordId))
 
     
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/meresco/harvester/repositorystatus.py /vol/extra_disk/development/meresco-harvester/workingsets/7.3.1-Edurep/version_1/meresco/harvester/repositorystatus.py
--- version_0/meresco/harvester/repositorystatus.py	2012-01-17 10:10:11.000000000 +0100
+++ version_1/meresco/harvester/repositorystatus.py	2012-01-17 11:41:00.000000000 +0100
@@ -35,6 +35,7 @@
 from re import compile
 from itertools import ifilter, islice
 from meresco.core import Observable
+from escaping import escapeFilename
 
 from harvesterlog import INVALID_DATA_MESSAGES_DIR
 
@@ -61,14 +62,14 @@
         yield "</GetStatus>"
 
     def invalidRecords(self, domainId, repositoryId):
-        invalidFile = join(self._statePath, domainId, "%s_invalid.ids" % repositoryId)
+        invalidFile = join(self._statePath, domainId, escapeFilename("%s_invalid.ids" % repositoryId))
         if not isfile(invalidFile):
             return []
         return reversed([line.strip() for line in open(invalidFile) if line.strip()])
 
     def getInvalidRecord(self, domainId, repositoryId, recordId):
         invalidDir = join(self._logPath, domainId, INVALID_DATA_MESSAGES_DIR)
-        return parse(open(join(invalidDir, repositoryId, recordId)))
+        return parse(open(join(invalidDir, escapeFilename(repositoryId), escapeFilename(recordId))))
 
     def _getRepositoryStatus(self, domainId, groupId, repoId):
         stats = self._parseEventsFile(domainId, repoId)
@@ -86,13 +87,13 @@
         yield '<invalid>%s</invalid>\n' % self._invalidCount(domainId, repoId)
         yield '<recentinvalids>\n'
         for invalidRecord in islice(self.invalidRecords(domainId, repoId), 10):
-            yield '<invalidId>%s</invalidId>\n' % invalidRecord
+            yield '<invalidId>%s</invalidId>\n' % escapeXml(invalidRecord)
         yield '</recentinvalids>\n'
         yield '<lastHarvestAttempt>%s</lastHarvestAttempt>\n' % stats.get('lastHarvestAttempt', '')
         yield '</status>\n'
 
     def _invalidCount(self, domainId, repositoryId):
-        invalidFile = join(self._statePath, domainId, "%s_invalid.ids" % repositoryId)
+        invalidFile = join(self._statePath, domainId, escapeFilename("%s_invalid.ids" % repositoryId))
         return len(open(invalidFile).readlines()) if isfile(invalidFile) else 0
 
     def _parseEventsFile(self, domainId, repositoryId):
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/test/harvesterlogtest.py /vol/extra_disk/development/meresco-harvester/workingsets/7.3.1-Edurep/version_1/test/harvesterlogtest.py
--- version_0/test/harvesterlogtest.py	2012-01-17 10:10:11.000000000 +0100
+++ version_1/test/harvesterlogtest.py	2012-01-17 11:41:00.000000000 +0100
@@ -170,12 +170,12 @@
     def testLogInvalidData(self):
         logger = HarvesterLog(stateDir=self.stateDir, logDir=self.logDir, name='name')
         logger.startRepository()
-        logger.notifyHarvestedRecord('repoid:oai:bla/bla')
-        logger.logInvalidData('repoid:oai:bla/bla', "Error")
+        logger.notifyHarvestedRecord('repo/id:oai:bla/bla')
+        logger.logInvalidData('repo/id:oai:bla/bla', "Error")
         self.assertEquals(1, logger.totalInvalidIds())
-        expectedFile = self.logDir + '/invalid/repoid/oai:bla%2Fbla'
+        expectedFile = self.logDir + '/invalid/repo%2Fid/oai:bla%2Fbla'
         self.assertEquals("Error", open(expectedFile).read())
-        logger.notifyHarvestedRecord('repoid:oai:bla/bla')
+        logger.notifyHarvestedRecord('repo/id:oai:bla/bla')
         self.assertEquals(0, logger.totalInvalidIds())
         self.assertFalse(isfile(expectedFile))
 
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/test/integration/harvestertest.py /vol/extra_disk/development/meresco-harvester/workingsets/7.3.1-Edurep/version_1/test/integration/harvestertest.py
--- version_0/test/integration/harvestertest.py	2012-01-17 10:10:11.000000000 +0100
+++ version_1/test/integration/harvestertest.py	2012-01-17 11:41:00.000000000 +0100
@@ -143,7 +143,7 @@
     def testRefresh(self):
         log = HarvesterLog(stateDir=join(self.harvesterStateDir, DOMAIN), logDir=join(self.harvesterLogDir, DOMAIN), name=REPOSITORY)
         log.startRepository()
-        for uploadId in ['%s:oai:record:%02d' % (REPOSITORY, i) for i in [1,2,120,121]]:
+        for uploadId in ['%s:oai:record:%02d' % (REPOSITORY, i) for i in [1,7,120,121]]:
             log.notifyHarvestedRecord(uploadId)
             log.uploadIdentifier(uploadId)
         for uploadId in ['%s:oai:record:%02d' % (REPOSITORY, i) for i in [4,5,122,123]]:
@@ -240,9 +240,14 @@
 
         self.startHarvester(repository=REPOSITORY)
         self.assertEquals(0, len(listdir(join(self.filesystemDir, REPOSITORYGROUP, REPOSITORY))))
-        self.assertEquals(set(['%s:oai:record:%02d' % (REPOSITORY, i) for i in range(1,11)]),
-                set([id.strip() for id in open(join(self.filesystemDir, 'deleted_records'))]))
-
+        self.assertEquals(set([
+                'harvestertest:oai:record:10', 'harvestertest:oai:record:09', 'harvestertest:oai:record:08', 
+                'harvestertest:oai:record:07', 'harvestertest:oai:record:06', 'harvestertest:oai:record:05', 
+                'harvestertest:oai:record:04', 'harvestertest:oai:record:03', 'harvestertest:oai:record:02/&gkn', 
+                'harvestertest:oai:record:01'
+            ]), 
+            set([id.strip() for id in open(join(self.filesystemDir, 'deleted_records'))])
+        )
 
     def testHarvestWithError(self):
         self.startHarvester(repository=REPOSITORY)
@@ -282,6 +287,8 @@
         log = HarvesterLog(stateDir=join(self.harvesterStateDir, DOMAIN), logDir=join(self.harvesterLogDir, DOMAIN), name=REPOSITORY)
         log.startRepository()
         for uploadId in ['%s:oai:record:%02d' % (REPOSITORY, i) for i in [1,2,120,121]]:
+            if uploadId == '%s:oai:record:02' % (REPOSITORY):
+                uploadId = '%s:oai:record:02/&gkn' % (REPOSITORY)
             log.notifyHarvestedRecord(uploadId)
             log.uploadIdentifier(uploadId)
         for uploadId in ['%s:oai:record:%02d' % (REPOSITORY, i) for i in [4,5,122,123,124]]:
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/test/integration/helperserver.py /vol/extra_disk/development/meresco-harvester/workingsets/7.3.1-Edurep/version_1/test/integration/helperserver.py
--- version_0/test/integration/helperserver.py	2012-01-17 10:10:11.000000000 +0100
+++ version_1/test/integration/helperserver.py	2012-01-17 11:41:00.000000000 +0100
@@ -46,6 +46,7 @@
 from meresco.core import Observable, be
 from re import compile
 from traceback import format_exc
+from xml.sax.saxutils import escape as escapeXml
 
 mydir = dirname(abspath(__file__))
 notWordCharRE = compile('\W+')
@@ -193,8 +194,11 @@
     )
     server.once.observer_init()
     for i in range(1,16):
-        identifier = 'oai:record:%02d' % i
-        oaiStorage.add(identifier=identifier, partname='oai_dc', data='''<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dc="http://purl.org/dc/elements/1.1/" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><dc:identifier>%s</dc:identifier></oai_dc:dc>''' % identifier)
+        if i == 2:
+            identifier = 'oai:record:02/&gkn'
+        else:
+            identifier = 'oai:record:%02d' % i
+        oaiStorage.add(identifier=identifier, partname='oai_dc', data='''<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dc="http://purl.org/dc/elements/1.1/" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><dc:identifier>%s</dc:identifier></oai_dc:dc>''' % escapeXml(identifier))
         oaiJazz.addOaiRecord(identifier=identifier, metadataFormats=[('oai_dc', 'http://www.openarchives.org/OAI/2.0/oai_dc.xsd', 'http://www.openarchives.org/OAI/2.0/oai_dc/')])
         if i in [3,6]:
             oaiJazz.delete(identifier=identifier)
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/test/integration/internalservertest.py /vol/extra_disk/development/meresco-harvester/workingsets/7.3.1-Edurep/version_1/test/integration/internalservertest.py
--- version_0/test/integration/internalservertest.py	2012-01-17 10:10:11.000000000 +0100
+++ version_1/test/integration/internalservertest.py	2012-01-17 11:41:00.000000000 +0100
@@ -49,15 +49,15 @@
         self.controlHelper(action='allInvalid')
         self.startHarvester(repository=REPOSITORY)
         header, result = getRequest(self.harvesterInternalServerPortNumber, '/invalid', {'domainId': 'adomain', 'repositoryId': 'integrationtest'}, parse='lxml')
-        self.assertEquals(['oai:record:08', 'oai:record:07', 'oai:record:05', 'oai:record:04', 'oai:record:02', 'oai:record:01'], result.xpath("/div/table/tr/td[@class='link']/a/text()"))
+        self.assertEquals(['oai:record:08', 'oai:record:07', 'oai:record:05', 'oai:record:04', 'oai:record:02/&gkn', 'oai:record:01'], result.xpath("/div/table/tr/td[@class='link']/a/text()"))
         self.assertEquals("/page/invalidRecord/?recordId=oai%3Arecord%3A08&domainId=adomain&repositoryId=integrationtest", result.xpath("/div/table/tr/td[@class='link']/a")[0].attrib['href'])
         self.assertEquals("/page/showHarvesterStatus/show?domainId=adomain&repositoryId=integrationtest", result.xpath("/div/p/a/@href")[0])
 
     def testViewInvalidRecord(self):
         self.controlHelper(action='allInvalid')
         self.startHarvester(repository=REPOSITORY)
-        header, result = getRequest(self.harvesterInternalServerPortNumber, '/invalidRecord', {'domainId': 'adomain', 'repositoryId': 'integrationtest', 'recordId': 'oai:record:02'}, parse='lxml')
-        self.assertEquals("Repository integrationtest - Record oai:record:02", result.xpath("//h3/text()")[0])
+        header, result = getRequest(self.harvesterInternalServerPortNumber, '/invalidRecord', {'domainId': 'adomain', 'repositoryId': 'integrationtest', 'recordId': 'oai:record:02/&gkn'}, parse='lxml')
+        self.assertEquals("Repository integrationtest - Record oai:record:02/&gkn", result.xpath("//h3/text()")[0])
         self.assertEquals("/page/invalid/?domainId=adomain&repositoryId=integrationtest", result.xpath("/div/p/a/@href")[0])
 
     def testGetStatusForDomainAndRepositoryId(self):
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/test/repositorystatustest.py /vol/extra_disk/development/meresco-harvester/workingsets/7.3.1-Edurep/version_1/test/repositorystatustest.py
--- version_0/test/repositorystatustest.py	2012-01-17 10:10:11.000000000 +0100
+++ version_1/test/repositorystatustest.py	2012-01-17 11:41:00.000000000 +0100
@@ -33,6 +33,7 @@
 from os.path import join
 
 from cq2utils import CQ2TestCase, CallTrace
+from escaping import escapeFilename
 
 from meresco.harvester.repositorystatus import RepositoryStatus
 from weightless.core import compose
@@ -48,25 +49,25 @@
         self.domainId = "adomain"
         makedirs(join(self.stateDir, self.domainId))
         repoId1LogDir = join(self.logDir, self.domainId, "invalid", "repoId1")
-        repoId2LogDir = join(self.logDir, self.domainId, "invalid", "repoId2")
+        repoId2LogDir = join(self.logDir, self.domainId, "invalid", escapeFilename("repoId/2"))
         makedirs(repoId1LogDir)
         makedirs(repoId2LogDir)
         open(join(repoId1LogDir, "invalidId1"), 'w').write("<diagnostic>ERROR1</diagnostic>")
-        open(join(repoId1LogDir, "invalidId2"), 'w').write("<diagnostic>ERROR2</diagnostic>")
-        open(join(repoId2LogDir, "invalidId3"), 'w').write("<diagnostic>ERROR3</diagnostic>")
-        open(join(self.stateDir, self.domainId, "repoId1_invalid.ids"), 'w').write("invalidId1\ninvalidId2")
-        open(join(self.stateDir, self.domainId, "repoId2_invalid.ids"), 'w').write("invalidId3")
+        open(join(repoId1LogDir, "invalidId&2"), 'w').write("<diagnostic>ERROR2</diagnostic>")
+        open(join(repoId2LogDir, escapeFilename("invalidId/3")), 'w').write("<diagnostic>ERROR3</diagnostic>")
+        open(join(self.stateDir, self.domainId, "repoId1_invalid.ids"), 'w').write("invalidId1\ninvalidId&2")
+        open(join(self.stateDir, self.domainId, escapeFilename("repoId/2_invalid.ids")), 'w').write("invalidId/3")
         open(join(self.stateDir, self.domainId, "repoId3_invalid.ids"), 'w').write("")
         self.status = RepositoryStatus(self.logDir, self.stateDir)
         observer = CallTrace("HarvesterData")
         observer.returnValues["getRepositoryGroupIds"] = ["repoGroupId1", "repoGroupId2"]
         def getRepositoryIds(domainId, repositoryGroupId):
             if repositoryGroupId == "repoGroupId1":
-                return ["repoId1", "repoId2"]
+                return ["repoId1", "repoId/2"]
             return ["repoId3", "anotherRepoId"]
         observer.methods["getRepositoryIds"] = getRepositoryIds
         def getRepositoryGroupId(domainId, repositoryId):
-            return 'repoGroupId1' if repositoryId in ['repoId1', 'repoId2'] else 'repoGroupId2'
+            return 'repoGroupId1' if repositoryId in ['repoId1', 'repoId/2'] else 'repoGroupId2'
         observer.methods["getRepositoryGroupId"] = getRepositoryGroupId
         self.status.addObserver(observer)
 
@@ -82,7 +83,7 @@
                 <recenterrors></recenterrors>
                 <invalid>2</invalid>
                 <recentinvalids>
-                    <invalidId>invalidId2</invalidId>
+                    <invalidId>invalidId&amp;2</invalidId>
                     <invalidId>invalidId1</invalidId>
                 </recentinvalids>
                 <lastHarvestAttempt></lastHarvestAttempt>
@@ -115,12 +116,12 @@
                 <recenterrors></recenterrors>
                 <invalid>2</invalid>
                 <recentinvalids>
-                    <invalidId>invalidId2</invalidId>
+                    <invalidId>invalidId&amp;2</invalidId>
                     <invalidId>invalidId1</invalidId>
                 </recentinvalids>
                 <lastHarvestAttempt></lastHarvestAttempt>
             </status>
-            <status repositoryId="repoId2" repositoryGroupId="repoGroupId1">
+            <status repositoryId="repoId/2" repositoryGroupId="repoGroupId1">
                 <lastHarvestDate></lastHarvestDate>
                 <harvested></harvested>
                 <uploaded></uploaded>
@@ -130,7 +131,7 @@
                 <recenterrors></recenterrors>
                 <invalid>1</invalid>
                 <recentinvalids>
-                    <invalidId>invalidId3</invalidId>
+                    <invalidId>invalidId/3</invalidId>
                 </recentinvalids>
                 <lastHarvestAttempt></lastHarvestAttempt>
             </status>
@@ -148,12 +149,12 @@
                 <recenterrors></recenterrors>
                 <invalid>2</invalid>
                 <recentinvalids>
-                    <invalidId>invalidId2</invalidId>
+                    <invalidId>invalidId&amp;2</invalidId>
                     <invalidId>invalidId1</invalidId>
                 </recentinvalids>
                 <lastHarvestAttempt></lastHarvestAttempt>
             </status>
-            <status repositoryId="repoId2" repositoryGroupId="repoGroupId1">
+            <status repositoryId="repoId/2" repositoryGroupId="repoGroupId1">
                 <lastHarvestDate></lastHarvestDate>
                 <harvested></harvested>
                 <uploaded></uploaded>
@@ -163,7 +164,7 @@
                 <recenterrors></recenterrors>
                 <invalid>1</invalid>
                 <recentinvalids>
-                    <invalidId>invalidId3</invalidId>
+                    <invalidId>invalidId/3</invalidId>
                 </recentinvalids>
                 <lastHarvestAttempt></lastHarvestAttempt>
             </status>
@@ -196,8 +197,8 @@
     def testGetAllInvalidRecords(self):
         def invalidRecords(repoId):
             return list(self.status.invalidRecords(self.domainId, repoId))
-        self.assertEquals(["invalidId2", "invalidId1"], invalidRecords("repoId1"))
-        self.assertEquals(["invalidId3"], invalidRecords("repoId2"))
+        self.assertEquals(["invalidId&2", "invalidId1"], invalidRecords("repoId1"))
+        self.assertEquals(["invalidId/3"], invalidRecords("repoId/2"))
         self.assertEquals([], invalidRecords("repoId3"))
         self.assertEquals([], invalidRecords("repoId4"))
 
@@ -205,8 +206,8 @@
         def getInvalidRecord(repoId, recordId):
             return tostring(self.status.getInvalidRecord(self.domainId, repoId, recordId)) 
         self.assertEquals("<diagnostic>ERROR1</diagnostic>", getInvalidRecord("repoId1", "invalidId1")) 
-        self.assertEquals("<diagnostic>ERROR2</diagnostic>", getInvalidRecord("repoId1", "invalidId2")) 
-        self.assertEquals("<diagnostic>ERROR3</diagnostic>", getInvalidRecord("repoId2", "invalidId3")) 
+        self.assertEquals("<diagnostic>ERROR2</diagnostic>", getInvalidRecord("repoId1", "invalidId&2")) 
+        self.assertEquals("<diagnostic>ERROR3</diagnostic>", getInvalidRecord("repoId/2", "invalidId/3")) 
 
     def testRecentInvalidsOnlyGives10InCaseOfManyMoreInvalids(self):
         with open(join(self.stateDir, self.domainId, "repoId1_invalid.ids"), 'w') as f:
@@ -312,7 +313,7 @@
   </recenterrors>
   <invalid>2</invalid>
   <recentinvalids>
-    <invalidId>invalidId2</invalidId>
+    <invalidId>invalidId&amp;2</invalidId>
     <invalidId>invalidId1</invalidId>
   </recentinvalids>
   <lastHarvestAttempt>2005-08-24T20:00:00Z</lastHarvestAttempt>
